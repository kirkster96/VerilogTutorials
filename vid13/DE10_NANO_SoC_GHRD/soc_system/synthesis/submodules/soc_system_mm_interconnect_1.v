// soc_system_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.0 595

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_1 (
		input  wire        clk_0_clk_clk,                                          //                                        clk_0_clk.clk
		input  wire        fpga_only_master_clk_reset_reset_bridge_in_reset_reset, // fpga_only_master_clk_reset_reset_bridge_in_reset.reset
		input  wire        mm_bridge_0_reset_reset_bridge_in_reset_reset,          //          mm_bridge_0_reset_reset_bridge_in_reset.reset
		input  wire [31:0] fpga_only_master_master_address,                        //                          fpga_only_master_master.address
		output wire        fpga_only_master_master_waitrequest,                    //                                                 .waitrequest
		input  wire [3:0]  fpga_only_master_master_byteenable,                     //                                                 .byteenable
		input  wire        fpga_only_master_master_read,                           //                                                 .read
		output wire [31:0] fpga_only_master_master_readdata,                       //                                                 .readdata
		output wire        fpga_only_master_master_readdatavalid,                  //                                                 .readdatavalid
		input  wire        fpga_only_master_master_write,                          //                                                 .write
		input  wire [31:0] fpga_only_master_master_writedata,                      //                                                 .writedata
		input  wire [17:0] mm_bridge_0_m0_address,                                 //                                   mm_bridge_0_m0.address
		output wire        mm_bridge_0_m0_waitrequest,                             //                                                 .waitrequest
		input  wire [0:0]  mm_bridge_0_m0_burstcount,                              //                                                 .burstcount
		input  wire [7:0]  mm_bridge_0_m0_byteenable,                              //                                                 .byteenable
		input  wire        mm_bridge_0_m0_read,                                    //                                                 .read
		output wire [63:0] mm_bridge_0_m0_readdata,                                //                                                 .readdata
		output wire        mm_bridge_0_m0_readdatavalid,                           //                                                 .readdatavalid
		input  wire        mm_bridge_0_m0_write,                                   //                                                 .write
		input  wire [63:0] mm_bridge_0_m0_writedata,                               //                                                 .writedata
		input  wire        mm_bridge_0_m0_debugaccess,                             //                                                 .debugaccess
		output wire [1:0]  button_pio_s1_address,                                  //                                    button_pio_s1.address
		output wire        button_pio_s1_write,                                    //                                                 .write
		input  wire [31:0] button_pio_s1_readdata,                                 //                                                 .readdata
		output wire [31:0] button_pio_s1_writedata,                                //                                                 .writedata
		output wire        button_pio_s1_chipselect,                               //                                                 .chipselect
		output wire [1:0]  dipsw_pio_s1_address,                                   //                                     dipsw_pio_s1.address
		output wire        dipsw_pio_s1_write,                                     //                                                 .write
		input  wire [31:0] dipsw_pio_s1_readdata,                                  //                                                 .readdata
		output wire [31:0] dipsw_pio_s1_writedata,                                 //                                                 .writedata
		output wire        dipsw_pio_s1_chipselect,                                //                                                 .chipselect
		output wire [5:0]  ILC_avalon_slave_address,                               //                                 ILC_avalon_slave.address
		output wire        ILC_avalon_slave_write,                                 //                                                 .write
		output wire        ILC_avalon_slave_read,                                  //                                                 .read
		input  wire [31:0] ILC_avalon_slave_readdata,                              //                                                 .readdata
		output wire [31:0] ILC_avalon_slave_writedata,                             //                                                 .writedata
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                    //                      jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                      //                                                 .write
		output wire        jtag_uart_avalon_jtag_slave_read,                       //                                                 .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                   //                                                 .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,                  //                                                 .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,                //                                                 .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,                 //                                                 .chipselect
		output wire [1:0]  led_pio_s1_address,                                     //                                       led_pio_s1.address
		output wire        led_pio_s1_write,                                       //                                                 .write
		input  wire [31:0] led_pio_s1_readdata,                                    //                                                 .readdata
		output wire [31:0] led_pio_s1_writedata,                                   //                                                 .writedata
		output wire        led_pio_s1_chipselect,                                  //                                                 .chipselect
		output wire        pio64_in_0_s0_read,                                     //                                    pio64_in_0_s0.read
		input  wire [63:0] pio64_in_0_s0_readdata,                                 //                                                 .readdata
		output wire        pio64_out_0_s0_write,                                   //                                   pio64_out_0_s0.write
		output wire [63:0] pio64_out_0_s0_writedata,                               //                                                 .writedata
		output wire        pio64_out_1_s0_write,                                   //                                   pio64_out_1_s0.write
		output wire [63:0] pio64_out_1_s0_writedata,                               //                                                 .writedata
		output wire        pio64_out_2_s0_write,                                   //                                   pio64_out_2_s0.write
		output wire [63:0] pio64_out_2_s0_writedata,                               //                                                 .writedata
		output wire [0:0]  sysid_qsys_control_slave_address,                       //                         sysid_qsys_control_slave.address
		input  wire [31:0] sysid_qsys_control_slave_readdata                       //                                                 .readdata
	);

	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;                   // mm_bridge_0_m0_agent:av_waitrequest -> mm_bridge_0_m0_translator:uav_waitrequest
	wire   [63:0] mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;                      // mm_bridge_0_m0_agent:av_readdata -> mm_bridge_0_m0_translator:uav_readdata
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;                   // mm_bridge_0_m0_translator:uav_debugaccess -> mm_bridge_0_m0_agent:av_debugaccess
	wire   [31:0] mm_bridge_0_m0_translator_avalon_universal_master_0_address;                       // mm_bridge_0_m0_translator:uav_address -> mm_bridge_0_m0_agent:av_address
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_read;                          // mm_bridge_0_m0_translator:uav_read -> mm_bridge_0_m0_agent:av_read
	wire    [7:0] mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;                    // mm_bridge_0_m0_translator:uav_byteenable -> mm_bridge_0_m0_agent:av_byteenable
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid;                 // mm_bridge_0_m0_agent:av_readdatavalid -> mm_bridge_0_m0_translator:uav_readdatavalid
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_lock;                          // mm_bridge_0_m0_translator:uav_lock -> mm_bridge_0_m0_agent:av_lock
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_write;                         // mm_bridge_0_m0_translator:uav_write -> mm_bridge_0_m0_agent:av_write
	wire   [63:0] mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;                     // mm_bridge_0_m0_translator:uav_writedata -> mm_bridge_0_m0_agent:av_writedata
	wire    [3:0] mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;                    // mm_bridge_0_m0_translator:uav_burstcount -> mm_bridge_0_m0_agent:av_burstcount
	wire          fpga_only_master_master_translator_avalon_universal_master_0_waitrequest;          // fpga_only_master_master_agent:av_waitrequest -> fpga_only_master_master_translator:uav_waitrequest
	wire   [31:0] fpga_only_master_master_translator_avalon_universal_master_0_readdata;             // fpga_only_master_master_agent:av_readdata -> fpga_only_master_master_translator:uav_readdata
	wire          fpga_only_master_master_translator_avalon_universal_master_0_debugaccess;          // fpga_only_master_master_translator:uav_debugaccess -> fpga_only_master_master_agent:av_debugaccess
	wire   [31:0] fpga_only_master_master_translator_avalon_universal_master_0_address;              // fpga_only_master_master_translator:uav_address -> fpga_only_master_master_agent:av_address
	wire          fpga_only_master_master_translator_avalon_universal_master_0_read;                 // fpga_only_master_master_translator:uav_read -> fpga_only_master_master_agent:av_read
	wire    [3:0] fpga_only_master_master_translator_avalon_universal_master_0_byteenable;           // fpga_only_master_master_translator:uav_byteenable -> fpga_only_master_master_agent:av_byteenable
	wire          fpga_only_master_master_translator_avalon_universal_master_0_readdatavalid;        // fpga_only_master_master_agent:av_readdatavalid -> fpga_only_master_master_translator:uav_readdatavalid
	wire          fpga_only_master_master_translator_avalon_universal_master_0_lock;                 // fpga_only_master_master_translator:uav_lock -> fpga_only_master_master_agent:av_lock
	wire          fpga_only_master_master_translator_avalon_universal_master_0_write;                // fpga_only_master_master_translator:uav_write -> fpga_only_master_master_agent:av_write
	wire   [31:0] fpga_only_master_master_translator_avalon_universal_master_0_writedata;            // fpga_only_master_master_translator:uav_writedata -> fpga_only_master_master_agent:av_writedata
	wire    [2:0] fpga_only_master_master_translator_avalon_universal_master_0_burstcount;           // fpga_only_master_master_translator:uav_burstcount -> fpga_only_master_master_agent:av_burstcount
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                     // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                  // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                  // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                      // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                   // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                         // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                         // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                    // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                        // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                   // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                 // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [109:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                  // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                 // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                         // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                           // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                              // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [109:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                               // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                              // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                      // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                        // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire   [31:0] ilc_avalon_slave_agent_m0_readdata;                                                // ILC_avalon_slave_translator:uav_readdata -> ILC_avalon_slave_agent:m0_readdata
	wire          ilc_avalon_slave_agent_m0_waitrequest;                                             // ILC_avalon_slave_translator:uav_waitrequest -> ILC_avalon_slave_agent:m0_waitrequest
	wire          ilc_avalon_slave_agent_m0_debugaccess;                                             // ILC_avalon_slave_agent:m0_debugaccess -> ILC_avalon_slave_translator:uav_debugaccess
	wire   [31:0] ilc_avalon_slave_agent_m0_address;                                                 // ILC_avalon_slave_agent:m0_address -> ILC_avalon_slave_translator:uav_address
	wire    [3:0] ilc_avalon_slave_agent_m0_byteenable;                                              // ILC_avalon_slave_agent:m0_byteenable -> ILC_avalon_slave_translator:uav_byteenable
	wire          ilc_avalon_slave_agent_m0_read;                                                    // ILC_avalon_slave_agent:m0_read -> ILC_avalon_slave_translator:uav_read
	wire          ilc_avalon_slave_agent_m0_readdatavalid;                                           // ILC_avalon_slave_translator:uav_readdatavalid -> ILC_avalon_slave_agent:m0_readdatavalid
	wire          ilc_avalon_slave_agent_m0_lock;                                                    // ILC_avalon_slave_agent:m0_lock -> ILC_avalon_slave_translator:uav_lock
	wire   [31:0] ilc_avalon_slave_agent_m0_writedata;                                               // ILC_avalon_slave_agent:m0_writedata -> ILC_avalon_slave_translator:uav_writedata
	wire          ilc_avalon_slave_agent_m0_write;                                                   // ILC_avalon_slave_agent:m0_write -> ILC_avalon_slave_translator:uav_write
	wire    [2:0] ilc_avalon_slave_agent_m0_burstcount;                                              // ILC_avalon_slave_agent:m0_burstcount -> ILC_avalon_slave_translator:uav_burstcount
	wire          ilc_avalon_slave_agent_rf_source_valid;                                            // ILC_avalon_slave_agent:rf_source_valid -> ILC_avalon_slave_agent_rsp_fifo:in_valid
	wire  [109:0] ilc_avalon_slave_agent_rf_source_data;                                             // ILC_avalon_slave_agent:rf_source_data -> ILC_avalon_slave_agent_rsp_fifo:in_data
	wire          ilc_avalon_slave_agent_rf_source_ready;                                            // ILC_avalon_slave_agent_rsp_fifo:in_ready -> ILC_avalon_slave_agent:rf_source_ready
	wire          ilc_avalon_slave_agent_rf_source_startofpacket;                                    // ILC_avalon_slave_agent:rf_source_startofpacket -> ILC_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          ilc_avalon_slave_agent_rf_source_endofpacket;                                      // ILC_avalon_slave_agent:rf_source_endofpacket -> ILC_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          ilc_avalon_slave_agent_rsp_fifo_out_valid;                                         // ILC_avalon_slave_agent_rsp_fifo:out_valid -> ILC_avalon_slave_agent:rf_sink_valid
	wire  [109:0] ilc_avalon_slave_agent_rsp_fifo_out_data;                                          // ILC_avalon_slave_agent_rsp_fifo:out_data -> ILC_avalon_slave_agent:rf_sink_data
	wire          ilc_avalon_slave_agent_rsp_fifo_out_ready;                                         // ILC_avalon_slave_agent:rf_sink_ready -> ILC_avalon_slave_agent_rsp_fifo:out_ready
	wire          ilc_avalon_slave_agent_rsp_fifo_out_startofpacket;                                 // ILC_avalon_slave_agent_rsp_fifo:out_startofpacket -> ILC_avalon_slave_agent:rf_sink_startofpacket
	wire          ilc_avalon_slave_agent_rsp_fifo_out_endofpacket;                                   // ILC_avalon_slave_agent_rsp_fifo:out_endofpacket -> ILC_avalon_slave_agent:rf_sink_endofpacket
	wire   [31:0] sysid_qsys_control_slave_agent_m0_readdata;                                        // sysid_qsys_control_slave_translator:uav_readdata -> sysid_qsys_control_slave_agent:m0_readdata
	wire          sysid_qsys_control_slave_agent_m0_waitrequest;                                     // sysid_qsys_control_slave_translator:uav_waitrequest -> sysid_qsys_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_control_slave_agent_m0_debugaccess;                                     // sysid_qsys_control_slave_agent:m0_debugaccess -> sysid_qsys_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_qsys_control_slave_agent_m0_address;                                         // sysid_qsys_control_slave_agent:m0_address -> sysid_qsys_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_control_slave_agent_m0_byteenable;                                      // sysid_qsys_control_slave_agent:m0_byteenable -> sysid_qsys_control_slave_translator:uav_byteenable
	wire          sysid_qsys_control_slave_agent_m0_read;                                            // sysid_qsys_control_slave_agent:m0_read -> sysid_qsys_control_slave_translator:uav_read
	wire          sysid_qsys_control_slave_agent_m0_readdatavalid;                                   // sysid_qsys_control_slave_translator:uav_readdatavalid -> sysid_qsys_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_control_slave_agent_m0_lock;                                            // sysid_qsys_control_slave_agent:m0_lock -> sysid_qsys_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_control_slave_agent_m0_writedata;                                       // sysid_qsys_control_slave_agent:m0_writedata -> sysid_qsys_control_slave_translator:uav_writedata
	wire          sysid_qsys_control_slave_agent_m0_write;                                           // sysid_qsys_control_slave_agent:m0_write -> sysid_qsys_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_control_slave_agent_m0_burstcount;                                      // sysid_qsys_control_slave_agent:m0_burstcount -> sysid_qsys_control_slave_translator:uav_burstcount
	wire          sysid_qsys_control_slave_agent_rf_source_valid;                                    // sysid_qsys_control_slave_agent:rf_source_valid -> sysid_qsys_control_slave_agent_rsp_fifo:in_valid
	wire  [109:0] sysid_qsys_control_slave_agent_rf_source_data;                                     // sysid_qsys_control_slave_agent:rf_source_data -> sysid_qsys_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rf_source_ready;                                    // sysid_qsys_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_control_slave_agent:rf_source_ready
	wire          sysid_qsys_control_slave_agent_rf_source_startofpacket;                            // sysid_qsys_control_slave_agent:rf_source_startofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_control_slave_agent_rf_source_endofpacket;                              // sysid_qsys_control_slave_agent:rf_source_endofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_valid;                                 // sysid_qsys_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_control_slave_agent:rf_sink_valid
	wire  [109:0] sysid_qsys_control_slave_agent_rsp_fifo_out_data;                                  // sysid_qsys_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_control_slave_agent:rf_sink_data
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_ready;                                 // sysid_qsys_control_slave_agent:rf_sink_ready -> sysid_qsys_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket;                         // sysid_qsys_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket;                           // sysid_qsys_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_control_slave_agent:rf_sink_endofpacket
	wire   [63:0] pio64_out_0_s0_agent_m0_readdata;                                                  // pio64_out_0_s0_translator:uav_readdata -> pio64_out_0_s0_agent:m0_readdata
	wire          pio64_out_0_s0_agent_m0_waitrequest;                                               // pio64_out_0_s0_translator:uav_waitrequest -> pio64_out_0_s0_agent:m0_waitrequest
	wire          pio64_out_0_s0_agent_m0_debugaccess;                                               // pio64_out_0_s0_agent:m0_debugaccess -> pio64_out_0_s0_translator:uav_debugaccess
	wire   [31:0] pio64_out_0_s0_agent_m0_address;                                                   // pio64_out_0_s0_agent:m0_address -> pio64_out_0_s0_translator:uav_address
	wire    [7:0] pio64_out_0_s0_agent_m0_byteenable;                                                // pio64_out_0_s0_agent:m0_byteenable -> pio64_out_0_s0_translator:uav_byteenable
	wire          pio64_out_0_s0_agent_m0_read;                                                      // pio64_out_0_s0_agent:m0_read -> pio64_out_0_s0_translator:uav_read
	wire          pio64_out_0_s0_agent_m0_readdatavalid;                                             // pio64_out_0_s0_translator:uav_readdatavalid -> pio64_out_0_s0_agent:m0_readdatavalid
	wire          pio64_out_0_s0_agent_m0_lock;                                                      // pio64_out_0_s0_agent:m0_lock -> pio64_out_0_s0_translator:uav_lock
	wire   [63:0] pio64_out_0_s0_agent_m0_writedata;                                                 // pio64_out_0_s0_agent:m0_writedata -> pio64_out_0_s0_translator:uav_writedata
	wire          pio64_out_0_s0_agent_m0_write;                                                     // pio64_out_0_s0_agent:m0_write -> pio64_out_0_s0_translator:uav_write
	wire    [3:0] pio64_out_0_s0_agent_m0_burstcount;                                                // pio64_out_0_s0_agent:m0_burstcount -> pio64_out_0_s0_translator:uav_burstcount
	wire          pio64_out_0_s0_agent_rf_source_valid;                                              // pio64_out_0_s0_agent:rf_source_valid -> pio64_out_0_s0_agent_rsp_fifo:in_valid
	wire  [145:0] pio64_out_0_s0_agent_rf_source_data;                                               // pio64_out_0_s0_agent:rf_source_data -> pio64_out_0_s0_agent_rsp_fifo:in_data
	wire          pio64_out_0_s0_agent_rf_source_ready;                                              // pio64_out_0_s0_agent_rsp_fifo:in_ready -> pio64_out_0_s0_agent:rf_source_ready
	wire          pio64_out_0_s0_agent_rf_source_startofpacket;                                      // pio64_out_0_s0_agent:rf_source_startofpacket -> pio64_out_0_s0_agent_rsp_fifo:in_startofpacket
	wire          pio64_out_0_s0_agent_rf_source_endofpacket;                                        // pio64_out_0_s0_agent:rf_source_endofpacket -> pio64_out_0_s0_agent_rsp_fifo:in_endofpacket
	wire          pio64_out_0_s0_agent_rsp_fifo_out_valid;                                           // pio64_out_0_s0_agent_rsp_fifo:out_valid -> pio64_out_0_s0_agent:rf_sink_valid
	wire  [145:0] pio64_out_0_s0_agent_rsp_fifo_out_data;                                            // pio64_out_0_s0_agent_rsp_fifo:out_data -> pio64_out_0_s0_agent:rf_sink_data
	wire          pio64_out_0_s0_agent_rsp_fifo_out_ready;                                           // pio64_out_0_s0_agent:rf_sink_ready -> pio64_out_0_s0_agent_rsp_fifo:out_ready
	wire          pio64_out_0_s0_agent_rsp_fifo_out_startofpacket;                                   // pio64_out_0_s0_agent_rsp_fifo:out_startofpacket -> pio64_out_0_s0_agent:rf_sink_startofpacket
	wire          pio64_out_0_s0_agent_rsp_fifo_out_endofpacket;                                     // pio64_out_0_s0_agent_rsp_fifo:out_endofpacket -> pio64_out_0_s0_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                             // cmd_mux_003:src_valid -> pio64_out_0_s0_agent:cp_valid
	wire  [144:0] cmd_mux_003_src_data;                                                              // cmd_mux_003:src_data -> pio64_out_0_s0_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                             // pio64_out_0_s0_agent:cp_ready -> cmd_mux_003:src_ready
	wire    [9:0] cmd_mux_003_src_channel;                                                           // cmd_mux_003:src_channel -> pio64_out_0_s0_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                     // cmd_mux_003:src_startofpacket -> pio64_out_0_s0_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                       // cmd_mux_003:src_endofpacket -> pio64_out_0_s0_agent:cp_endofpacket
	wire   [63:0] pio64_out_1_s0_agent_m0_readdata;                                                  // pio64_out_1_s0_translator:uav_readdata -> pio64_out_1_s0_agent:m0_readdata
	wire          pio64_out_1_s0_agent_m0_waitrequest;                                               // pio64_out_1_s0_translator:uav_waitrequest -> pio64_out_1_s0_agent:m0_waitrequest
	wire          pio64_out_1_s0_agent_m0_debugaccess;                                               // pio64_out_1_s0_agent:m0_debugaccess -> pio64_out_1_s0_translator:uav_debugaccess
	wire   [31:0] pio64_out_1_s0_agent_m0_address;                                                   // pio64_out_1_s0_agent:m0_address -> pio64_out_1_s0_translator:uav_address
	wire    [7:0] pio64_out_1_s0_agent_m0_byteenable;                                                // pio64_out_1_s0_agent:m0_byteenable -> pio64_out_1_s0_translator:uav_byteenable
	wire          pio64_out_1_s0_agent_m0_read;                                                      // pio64_out_1_s0_agent:m0_read -> pio64_out_1_s0_translator:uav_read
	wire          pio64_out_1_s0_agent_m0_readdatavalid;                                             // pio64_out_1_s0_translator:uav_readdatavalid -> pio64_out_1_s0_agent:m0_readdatavalid
	wire          pio64_out_1_s0_agent_m0_lock;                                                      // pio64_out_1_s0_agent:m0_lock -> pio64_out_1_s0_translator:uav_lock
	wire   [63:0] pio64_out_1_s0_agent_m0_writedata;                                                 // pio64_out_1_s0_agent:m0_writedata -> pio64_out_1_s0_translator:uav_writedata
	wire          pio64_out_1_s0_agent_m0_write;                                                     // pio64_out_1_s0_agent:m0_write -> pio64_out_1_s0_translator:uav_write
	wire    [3:0] pio64_out_1_s0_agent_m0_burstcount;                                                // pio64_out_1_s0_agent:m0_burstcount -> pio64_out_1_s0_translator:uav_burstcount
	wire          pio64_out_1_s0_agent_rf_source_valid;                                              // pio64_out_1_s0_agent:rf_source_valid -> pio64_out_1_s0_agent_rsp_fifo:in_valid
	wire  [145:0] pio64_out_1_s0_agent_rf_source_data;                                               // pio64_out_1_s0_agent:rf_source_data -> pio64_out_1_s0_agent_rsp_fifo:in_data
	wire          pio64_out_1_s0_agent_rf_source_ready;                                              // pio64_out_1_s0_agent_rsp_fifo:in_ready -> pio64_out_1_s0_agent:rf_source_ready
	wire          pio64_out_1_s0_agent_rf_source_startofpacket;                                      // pio64_out_1_s0_agent:rf_source_startofpacket -> pio64_out_1_s0_agent_rsp_fifo:in_startofpacket
	wire          pio64_out_1_s0_agent_rf_source_endofpacket;                                        // pio64_out_1_s0_agent:rf_source_endofpacket -> pio64_out_1_s0_agent_rsp_fifo:in_endofpacket
	wire          pio64_out_1_s0_agent_rsp_fifo_out_valid;                                           // pio64_out_1_s0_agent_rsp_fifo:out_valid -> pio64_out_1_s0_agent:rf_sink_valid
	wire  [145:0] pio64_out_1_s0_agent_rsp_fifo_out_data;                                            // pio64_out_1_s0_agent_rsp_fifo:out_data -> pio64_out_1_s0_agent:rf_sink_data
	wire          pio64_out_1_s0_agent_rsp_fifo_out_ready;                                           // pio64_out_1_s0_agent:rf_sink_ready -> pio64_out_1_s0_agent_rsp_fifo:out_ready
	wire          pio64_out_1_s0_agent_rsp_fifo_out_startofpacket;                                   // pio64_out_1_s0_agent_rsp_fifo:out_startofpacket -> pio64_out_1_s0_agent:rf_sink_startofpacket
	wire          pio64_out_1_s0_agent_rsp_fifo_out_endofpacket;                                     // pio64_out_1_s0_agent_rsp_fifo:out_endofpacket -> pio64_out_1_s0_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                             // cmd_mux_004:src_valid -> pio64_out_1_s0_agent:cp_valid
	wire  [144:0] cmd_mux_004_src_data;                                                              // cmd_mux_004:src_data -> pio64_out_1_s0_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                             // pio64_out_1_s0_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [9:0] cmd_mux_004_src_channel;                                                           // cmd_mux_004:src_channel -> pio64_out_1_s0_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                     // cmd_mux_004:src_startofpacket -> pio64_out_1_s0_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                       // cmd_mux_004:src_endofpacket -> pio64_out_1_s0_agent:cp_endofpacket
	wire   [63:0] pio64_out_2_s0_agent_m0_readdata;                                                  // pio64_out_2_s0_translator:uav_readdata -> pio64_out_2_s0_agent:m0_readdata
	wire          pio64_out_2_s0_agent_m0_waitrequest;                                               // pio64_out_2_s0_translator:uav_waitrequest -> pio64_out_2_s0_agent:m0_waitrequest
	wire          pio64_out_2_s0_agent_m0_debugaccess;                                               // pio64_out_2_s0_agent:m0_debugaccess -> pio64_out_2_s0_translator:uav_debugaccess
	wire   [31:0] pio64_out_2_s0_agent_m0_address;                                                   // pio64_out_2_s0_agent:m0_address -> pio64_out_2_s0_translator:uav_address
	wire    [7:0] pio64_out_2_s0_agent_m0_byteenable;                                                // pio64_out_2_s0_agent:m0_byteenable -> pio64_out_2_s0_translator:uav_byteenable
	wire          pio64_out_2_s0_agent_m0_read;                                                      // pio64_out_2_s0_agent:m0_read -> pio64_out_2_s0_translator:uav_read
	wire          pio64_out_2_s0_agent_m0_readdatavalid;                                             // pio64_out_2_s0_translator:uav_readdatavalid -> pio64_out_2_s0_agent:m0_readdatavalid
	wire          pio64_out_2_s0_agent_m0_lock;                                                      // pio64_out_2_s0_agent:m0_lock -> pio64_out_2_s0_translator:uav_lock
	wire   [63:0] pio64_out_2_s0_agent_m0_writedata;                                                 // pio64_out_2_s0_agent:m0_writedata -> pio64_out_2_s0_translator:uav_writedata
	wire          pio64_out_2_s0_agent_m0_write;                                                     // pio64_out_2_s0_agent:m0_write -> pio64_out_2_s0_translator:uav_write
	wire    [3:0] pio64_out_2_s0_agent_m0_burstcount;                                                // pio64_out_2_s0_agent:m0_burstcount -> pio64_out_2_s0_translator:uav_burstcount
	wire          pio64_out_2_s0_agent_rf_source_valid;                                              // pio64_out_2_s0_agent:rf_source_valid -> pio64_out_2_s0_agent_rsp_fifo:in_valid
	wire  [145:0] pio64_out_2_s0_agent_rf_source_data;                                               // pio64_out_2_s0_agent:rf_source_data -> pio64_out_2_s0_agent_rsp_fifo:in_data
	wire          pio64_out_2_s0_agent_rf_source_ready;                                              // pio64_out_2_s0_agent_rsp_fifo:in_ready -> pio64_out_2_s0_agent:rf_source_ready
	wire          pio64_out_2_s0_agent_rf_source_startofpacket;                                      // pio64_out_2_s0_agent:rf_source_startofpacket -> pio64_out_2_s0_agent_rsp_fifo:in_startofpacket
	wire          pio64_out_2_s0_agent_rf_source_endofpacket;                                        // pio64_out_2_s0_agent:rf_source_endofpacket -> pio64_out_2_s0_agent_rsp_fifo:in_endofpacket
	wire          pio64_out_2_s0_agent_rsp_fifo_out_valid;                                           // pio64_out_2_s0_agent_rsp_fifo:out_valid -> pio64_out_2_s0_agent:rf_sink_valid
	wire  [145:0] pio64_out_2_s0_agent_rsp_fifo_out_data;                                            // pio64_out_2_s0_agent_rsp_fifo:out_data -> pio64_out_2_s0_agent:rf_sink_data
	wire          pio64_out_2_s0_agent_rsp_fifo_out_ready;                                           // pio64_out_2_s0_agent:rf_sink_ready -> pio64_out_2_s0_agent_rsp_fifo:out_ready
	wire          pio64_out_2_s0_agent_rsp_fifo_out_startofpacket;                                   // pio64_out_2_s0_agent_rsp_fifo:out_startofpacket -> pio64_out_2_s0_agent:rf_sink_startofpacket
	wire          pio64_out_2_s0_agent_rsp_fifo_out_endofpacket;                                     // pio64_out_2_s0_agent_rsp_fifo:out_endofpacket -> pio64_out_2_s0_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                             // cmd_mux_005:src_valid -> pio64_out_2_s0_agent:cp_valid
	wire  [144:0] cmd_mux_005_src_data;                                                              // cmd_mux_005:src_data -> pio64_out_2_s0_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                             // pio64_out_2_s0_agent:cp_ready -> cmd_mux_005:src_ready
	wire    [9:0] cmd_mux_005_src_channel;                                                           // cmd_mux_005:src_channel -> pio64_out_2_s0_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                     // cmd_mux_005:src_startofpacket -> pio64_out_2_s0_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                       // cmd_mux_005:src_endofpacket -> pio64_out_2_s0_agent:cp_endofpacket
	wire   [63:0] pio64_in_0_s0_agent_m0_readdata;                                                   // pio64_in_0_s0_translator:uav_readdata -> pio64_in_0_s0_agent:m0_readdata
	wire          pio64_in_0_s0_agent_m0_waitrequest;                                                // pio64_in_0_s0_translator:uav_waitrequest -> pio64_in_0_s0_agent:m0_waitrequest
	wire          pio64_in_0_s0_agent_m0_debugaccess;                                                // pio64_in_0_s0_agent:m0_debugaccess -> pio64_in_0_s0_translator:uav_debugaccess
	wire   [31:0] pio64_in_0_s0_agent_m0_address;                                                    // pio64_in_0_s0_agent:m0_address -> pio64_in_0_s0_translator:uav_address
	wire    [7:0] pio64_in_0_s0_agent_m0_byteenable;                                                 // pio64_in_0_s0_agent:m0_byteenable -> pio64_in_0_s0_translator:uav_byteenable
	wire          pio64_in_0_s0_agent_m0_read;                                                       // pio64_in_0_s0_agent:m0_read -> pio64_in_0_s0_translator:uav_read
	wire          pio64_in_0_s0_agent_m0_readdatavalid;                                              // pio64_in_0_s0_translator:uav_readdatavalid -> pio64_in_0_s0_agent:m0_readdatavalid
	wire          pio64_in_0_s0_agent_m0_lock;                                                       // pio64_in_0_s0_agent:m0_lock -> pio64_in_0_s0_translator:uav_lock
	wire   [63:0] pio64_in_0_s0_agent_m0_writedata;                                                  // pio64_in_0_s0_agent:m0_writedata -> pio64_in_0_s0_translator:uav_writedata
	wire          pio64_in_0_s0_agent_m0_write;                                                      // pio64_in_0_s0_agent:m0_write -> pio64_in_0_s0_translator:uav_write
	wire    [3:0] pio64_in_0_s0_agent_m0_burstcount;                                                 // pio64_in_0_s0_agent:m0_burstcount -> pio64_in_0_s0_translator:uav_burstcount
	wire          pio64_in_0_s0_agent_rf_source_valid;                                               // pio64_in_0_s0_agent:rf_source_valid -> pio64_in_0_s0_agent_rsp_fifo:in_valid
	wire  [145:0] pio64_in_0_s0_agent_rf_source_data;                                                // pio64_in_0_s0_agent:rf_source_data -> pio64_in_0_s0_agent_rsp_fifo:in_data
	wire          pio64_in_0_s0_agent_rf_source_ready;                                               // pio64_in_0_s0_agent_rsp_fifo:in_ready -> pio64_in_0_s0_agent:rf_source_ready
	wire          pio64_in_0_s0_agent_rf_source_startofpacket;                                       // pio64_in_0_s0_agent:rf_source_startofpacket -> pio64_in_0_s0_agent_rsp_fifo:in_startofpacket
	wire          pio64_in_0_s0_agent_rf_source_endofpacket;                                         // pio64_in_0_s0_agent:rf_source_endofpacket -> pio64_in_0_s0_agent_rsp_fifo:in_endofpacket
	wire          pio64_in_0_s0_agent_rsp_fifo_out_valid;                                            // pio64_in_0_s0_agent_rsp_fifo:out_valid -> pio64_in_0_s0_agent:rf_sink_valid
	wire  [145:0] pio64_in_0_s0_agent_rsp_fifo_out_data;                                             // pio64_in_0_s0_agent_rsp_fifo:out_data -> pio64_in_0_s0_agent:rf_sink_data
	wire          pio64_in_0_s0_agent_rsp_fifo_out_ready;                                            // pio64_in_0_s0_agent:rf_sink_ready -> pio64_in_0_s0_agent_rsp_fifo:out_ready
	wire          pio64_in_0_s0_agent_rsp_fifo_out_startofpacket;                                    // pio64_in_0_s0_agent_rsp_fifo:out_startofpacket -> pio64_in_0_s0_agent:rf_sink_startofpacket
	wire          pio64_in_0_s0_agent_rsp_fifo_out_endofpacket;                                      // pio64_in_0_s0_agent_rsp_fifo:out_endofpacket -> pio64_in_0_s0_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                             // cmd_mux_006:src_valid -> pio64_in_0_s0_agent:cp_valid
	wire  [144:0] cmd_mux_006_src_data;                                                              // cmd_mux_006:src_data -> pio64_in_0_s0_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                             // pio64_in_0_s0_agent:cp_ready -> cmd_mux_006:src_ready
	wire    [9:0] cmd_mux_006_src_channel;                                                           // cmd_mux_006:src_channel -> pio64_in_0_s0_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                     // cmd_mux_006:src_startofpacket -> pio64_in_0_s0_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                       // cmd_mux_006:src_endofpacket -> pio64_in_0_s0_agent:cp_endofpacket
	wire   [31:0] led_pio_s1_agent_m0_readdata;                                                      // led_pio_s1_translator:uav_readdata -> led_pio_s1_agent:m0_readdata
	wire          led_pio_s1_agent_m0_waitrequest;                                                   // led_pio_s1_translator:uav_waitrequest -> led_pio_s1_agent:m0_waitrequest
	wire          led_pio_s1_agent_m0_debugaccess;                                                   // led_pio_s1_agent:m0_debugaccess -> led_pio_s1_translator:uav_debugaccess
	wire   [31:0] led_pio_s1_agent_m0_address;                                                       // led_pio_s1_agent:m0_address -> led_pio_s1_translator:uav_address
	wire    [3:0] led_pio_s1_agent_m0_byteenable;                                                    // led_pio_s1_agent:m0_byteenable -> led_pio_s1_translator:uav_byteenable
	wire          led_pio_s1_agent_m0_read;                                                          // led_pio_s1_agent:m0_read -> led_pio_s1_translator:uav_read
	wire          led_pio_s1_agent_m0_readdatavalid;                                                 // led_pio_s1_translator:uav_readdatavalid -> led_pio_s1_agent:m0_readdatavalid
	wire          led_pio_s1_agent_m0_lock;                                                          // led_pio_s1_agent:m0_lock -> led_pio_s1_translator:uav_lock
	wire   [31:0] led_pio_s1_agent_m0_writedata;                                                     // led_pio_s1_agent:m0_writedata -> led_pio_s1_translator:uav_writedata
	wire          led_pio_s1_agent_m0_write;                                                         // led_pio_s1_agent:m0_write -> led_pio_s1_translator:uav_write
	wire    [2:0] led_pio_s1_agent_m0_burstcount;                                                    // led_pio_s1_agent:m0_burstcount -> led_pio_s1_translator:uav_burstcount
	wire          led_pio_s1_agent_rf_source_valid;                                                  // led_pio_s1_agent:rf_source_valid -> led_pio_s1_agent_rsp_fifo:in_valid
	wire  [109:0] led_pio_s1_agent_rf_source_data;                                                   // led_pio_s1_agent:rf_source_data -> led_pio_s1_agent_rsp_fifo:in_data
	wire          led_pio_s1_agent_rf_source_ready;                                                  // led_pio_s1_agent_rsp_fifo:in_ready -> led_pio_s1_agent:rf_source_ready
	wire          led_pio_s1_agent_rf_source_startofpacket;                                          // led_pio_s1_agent:rf_source_startofpacket -> led_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          led_pio_s1_agent_rf_source_endofpacket;                                            // led_pio_s1_agent:rf_source_endofpacket -> led_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          led_pio_s1_agent_rsp_fifo_out_valid;                                               // led_pio_s1_agent_rsp_fifo:out_valid -> led_pio_s1_agent:rf_sink_valid
	wire  [109:0] led_pio_s1_agent_rsp_fifo_out_data;                                                // led_pio_s1_agent_rsp_fifo:out_data -> led_pio_s1_agent:rf_sink_data
	wire          led_pio_s1_agent_rsp_fifo_out_ready;                                               // led_pio_s1_agent:rf_sink_ready -> led_pio_s1_agent_rsp_fifo:out_ready
	wire          led_pio_s1_agent_rsp_fifo_out_startofpacket;                                       // led_pio_s1_agent_rsp_fifo:out_startofpacket -> led_pio_s1_agent:rf_sink_startofpacket
	wire          led_pio_s1_agent_rsp_fifo_out_endofpacket;                                         // led_pio_s1_agent_rsp_fifo:out_endofpacket -> led_pio_s1_agent:rf_sink_endofpacket
	wire   [31:0] dipsw_pio_s1_agent_m0_readdata;                                                    // dipsw_pio_s1_translator:uav_readdata -> dipsw_pio_s1_agent:m0_readdata
	wire          dipsw_pio_s1_agent_m0_waitrequest;                                                 // dipsw_pio_s1_translator:uav_waitrequest -> dipsw_pio_s1_agent:m0_waitrequest
	wire          dipsw_pio_s1_agent_m0_debugaccess;                                                 // dipsw_pio_s1_agent:m0_debugaccess -> dipsw_pio_s1_translator:uav_debugaccess
	wire   [31:0] dipsw_pio_s1_agent_m0_address;                                                     // dipsw_pio_s1_agent:m0_address -> dipsw_pio_s1_translator:uav_address
	wire    [3:0] dipsw_pio_s1_agent_m0_byteenable;                                                  // dipsw_pio_s1_agent:m0_byteenable -> dipsw_pio_s1_translator:uav_byteenable
	wire          dipsw_pio_s1_agent_m0_read;                                                        // dipsw_pio_s1_agent:m0_read -> dipsw_pio_s1_translator:uav_read
	wire          dipsw_pio_s1_agent_m0_readdatavalid;                                               // dipsw_pio_s1_translator:uav_readdatavalid -> dipsw_pio_s1_agent:m0_readdatavalid
	wire          dipsw_pio_s1_agent_m0_lock;                                                        // dipsw_pio_s1_agent:m0_lock -> dipsw_pio_s1_translator:uav_lock
	wire   [31:0] dipsw_pio_s1_agent_m0_writedata;                                                   // dipsw_pio_s1_agent:m0_writedata -> dipsw_pio_s1_translator:uav_writedata
	wire          dipsw_pio_s1_agent_m0_write;                                                       // dipsw_pio_s1_agent:m0_write -> dipsw_pio_s1_translator:uav_write
	wire    [2:0] dipsw_pio_s1_agent_m0_burstcount;                                                  // dipsw_pio_s1_agent:m0_burstcount -> dipsw_pio_s1_translator:uav_burstcount
	wire          dipsw_pio_s1_agent_rf_source_valid;                                                // dipsw_pio_s1_agent:rf_source_valid -> dipsw_pio_s1_agent_rsp_fifo:in_valid
	wire  [109:0] dipsw_pio_s1_agent_rf_source_data;                                                 // dipsw_pio_s1_agent:rf_source_data -> dipsw_pio_s1_agent_rsp_fifo:in_data
	wire          dipsw_pio_s1_agent_rf_source_ready;                                                // dipsw_pio_s1_agent_rsp_fifo:in_ready -> dipsw_pio_s1_agent:rf_source_ready
	wire          dipsw_pio_s1_agent_rf_source_startofpacket;                                        // dipsw_pio_s1_agent:rf_source_startofpacket -> dipsw_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          dipsw_pio_s1_agent_rf_source_endofpacket;                                          // dipsw_pio_s1_agent:rf_source_endofpacket -> dipsw_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          dipsw_pio_s1_agent_rsp_fifo_out_valid;                                             // dipsw_pio_s1_agent_rsp_fifo:out_valid -> dipsw_pio_s1_agent:rf_sink_valid
	wire  [109:0] dipsw_pio_s1_agent_rsp_fifo_out_data;                                              // dipsw_pio_s1_agent_rsp_fifo:out_data -> dipsw_pio_s1_agent:rf_sink_data
	wire          dipsw_pio_s1_agent_rsp_fifo_out_ready;                                             // dipsw_pio_s1_agent:rf_sink_ready -> dipsw_pio_s1_agent_rsp_fifo:out_ready
	wire          dipsw_pio_s1_agent_rsp_fifo_out_startofpacket;                                     // dipsw_pio_s1_agent_rsp_fifo:out_startofpacket -> dipsw_pio_s1_agent:rf_sink_startofpacket
	wire          dipsw_pio_s1_agent_rsp_fifo_out_endofpacket;                                       // dipsw_pio_s1_agent_rsp_fifo:out_endofpacket -> dipsw_pio_s1_agent:rf_sink_endofpacket
	wire   [31:0] button_pio_s1_agent_m0_readdata;                                                   // button_pio_s1_translator:uav_readdata -> button_pio_s1_agent:m0_readdata
	wire          button_pio_s1_agent_m0_waitrequest;                                                // button_pio_s1_translator:uav_waitrequest -> button_pio_s1_agent:m0_waitrequest
	wire          button_pio_s1_agent_m0_debugaccess;                                                // button_pio_s1_agent:m0_debugaccess -> button_pio_s1_translator:uav_debugaccess
	wire   [31:0] button_pio_s1_agent_m0_address;                                                    // button_pio_s1_agent:m0_address -> button_pio_s1_translator:uav_address
	wire    [3:0] button_pio_s1_agent_m0_byteenable;                                                 // button_pio_s1_agent:m0_byteenable -> button_pio_s1_translator:uav_byteenable
	wire          button_pio_s1_agent_m0_read;                                                       // button_pio_s1_agent:m0_read -> button_pio_s1_translator:uav_read
	wire          button_pio_s1_agent_m0_readdatavalid;                                              // button_pio_s1_translator:uav_readdatavalid -> button_pio_s1_agent:m0_readdatavalid
	wire          button_pio_s1_agent_m0_lock;                                                       // button_pio_s1_agent:m0_lock -> button_pio_s1_translator:uav_lock
	wire   [31:0] button_pio_s1_agent_m0_writedata;                                                  // button_pio_s1_agent:m0_writedata -> button_pio_s1_translator:uav_writedata
	wire          button_pio_s1_agent_m0_write;                                                      // button_pio_s1_agent:m0_write -> button_pio_s1_translator:uav_write
	wire    [2:0] button_pio_s1_agent_m0_burstcount;                                                 // button_pio_s1_agent:m0_burstcount -> button_pio_s1_translator:uav_burstcount
	wire          button_pio_s1_agent_rf_source_valid;                                               // button_pio_s1_agent:rf_source_valid -> button_pio_s1_agent_rsp_fifo:in_valid
	wire  [109:0] button_pio_s1_agent_rf_source_data;                                                // button_pio_s1_agent:rf_source_data -> button_pio_s1_agent_rsp_fifo:in_data
	wire          button_pio_s1_agent_rf_source_ready;                                               // button_pio_s1_agent_rsp_fifo:in_ready -> button_pio_s1_agent:rf_source_ready
	wire          button_pio_s1_agent_rf_source_startofpacket;                                       // button_pio_s1_agent:rf_source_startofpacket -> button_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          button_pio_s1_agent_rf_source_endofpacket;                                         // button_pio_s1_agent:rf_source_endofpacket -> button_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          button_pio_s1_agent_rsp_fifo_out_valid;                                            // button_pio_s1_agent_rsp_fifo:out_valid -> button_pio_s1_agent:rf_sink_valid
	wire  [109:0] button_pio_s1_agent_rsp_fifo_out_data;                                             // button_pio_s1_agent_rsp_fifo:out_data -> button_pio_s1_agent:rf_sink_data
	wire          button_pio_s1_agent_rsp_fifo_out_ready;                                            // button_pio_s1_agent:rf_sink_ready -> button_pio_s1_agent_rsp_fifo:out_ready
	wire          button_pio_s1_agent_rsp_fifo_out_startofpacket;                                    // button_pio_s1_agent_rsp_fifo:out_startofpacket -> button_pio_s1_agent:rf_sink_startofpacket
	wire          button_pio_s1_agent_rsp_fifo_out_endofpacket;                                      // button_pio_s1_agent_rsp_fifo:out_endofpacket -> button_pio_s1_agent:rf_sink_endofpacket
	wire          mm_bridge_0_m0_agent_cp_valid;                                                     // mm_bridge_0_m0_agent:cp_valid -> router:sink_valid
	wire  [144:0] mm_bridge_0_m0_agent_cp_data;                                                      // mm_bridge_0_m0_agent:cp_data -> router:sink_data
	wire          mm_bridge_0_m0_agent_cp_ready;                                                     // router:sink_ready -> mm_bridge_0_m0_agent:cp_ready
	wire          mm_bridge_0_m0_agent_cp_startofpacket;                                             // mm_bridge_0_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          mm_bridge_0_m0_agent_cp_endofpacket;                                               // mm_bridge_0_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          fpga_only_master_master_agent_cp_valid;                                            // fpga_only_master_master_agent:cp_valid -> router_001:sink_valid
	wire  [108:0] fpga_only_master_master_agent_cp_data;                                             // fpga_only_master_master_agent:cp_data -> router_001:sink_data
	wire          fpga_only_master_master_agent_cp_ready;                                            // router_001:sink_ready -> fpga_only_master_master_agent:cp_ready
	wire          fpga_only_master_master_agent_cp_startofpacket;                                    // fpga_only_master_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          fpga_only_master_master_agent_cp_endofpacket;                                      // fpga_only_master_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                        // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [108:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                         // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                        // router_002:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                  // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                              // router_002:src_valid -> rsp_demux:sink_valid
	wire  [108:0] router_002_src_data;                                                               // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                              // rsp_demux:sink_ready -> router_002:src_ready
	wire    [9:0] router_002_src_channel;                                                            // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                      // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                        // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          ilc_avalon_slave_agent_rp_valid;                                                   // ILC_avalon_slave_agent:rp_valid -> router_003:sink_valid
	wire  [108:0] ilc_avalon_slave_agent_rp_data;                                                    // ILC_avalon_slave_agent:rp_data -> router_003:sink_data
	wire          ilc_avalon_slave_agent_rp_ready;                                                   // router_003:sink_ready -> ILC_avalon_slave_agent:rp_ready
	wire          ilc_avalon_slave_agent_rp_startofpacket;                                           // ILC_avalon_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          ilc_avalon_slave_agent_rp_endofpacket;                                             // ILC_avalon_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                              // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [108:0] router_003_src_data;                                                               // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                              // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [9:0] router_003_src_channel;                                                            // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                      // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                        // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rp_valid;                                           // sysid_qsys_control_slave_agent:rp_valid -> router_004:sink_valid
	wire  [108:0] sysid_qsys_control_slave_agent_rp_data;                                            // sysid_qsys_control_slave_agent:rp_data -> router_004:sink_data
	wire          sysid_qsys_control_slave_agent_rp_ready;                                           // router_004:sink_ready -> sysid_qsys_control_slave_agent:rp_ready
	wire          sysid_qsys_control_slave_agent_rp_startofpacket;                                   // sysid_qsys_control_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rp_endofpacket;                                     // sysid_qsys_control_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                              // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [108:0] router_004_src_data;                                                               // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                              // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [9:0] router_004_src_channel;                                                            // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                      // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                        // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          pio64_out_0_s0_agent_rp_valid;                                                     // pio64_out_0_s0_agent:rp_valid -> router_005:sink_valid
	wire  [144:0] pio64_out_0_s0_agent_rp_data;                                                      // pio64_out_0_s0_agent:rp_data -> router_005:sink_data
	wire          pio64_out_0_s0_agent_rp_ready;                                                     // router_005:sink_ready -> pio64_out_0_s0_agent:rp_ready
	wire          pio64_out_0_s0_agent_rp_startofpacket;                                             // pio64_out_0_s0_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          pio64_out_0_s0_agent_rp_endofpacket;                                               // pio64_out_0_s0_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                              // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [144:0] router_005_src_data;                                                               // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                              // rsp_demux_003:sink_ready -> router_005:src_ready
	wire    [9:0] router_005_src_channel;                                                            // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                      // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                        // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          pio64_out_1_s0_agent_rp_valid;                                                     // pio64_out_1_s0_agent:rp_valid -> router_006:sink_valid
	wire  [144:0] pio64_out_1_s0_agent_rp_data;                                                      // pio64_out_1_s0_agent:rp_data -> router_006:sink_data
	wire          pio64_out_1_s0_agent_rp_ready;                                                     // router_006:sink_ready -> pio64_out_1_s0_agent:rp_ready
	wire          pio64_out_1_s0_agent_rp_startofpacket;                                             // pio64_out_1_s0_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          pio64_out_1_s0_agent_rp_endofpacket;                                               // pio64_out_1_s0_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                              // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [144:0] router_006_src_data;                                                               // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                              // rsp_demux_004:sink_ready -> router_006:src_ready
	wire    [9:0] router_006_src_channel;                                                            // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                                      // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                        // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          pio64_out_2_s0_agent_rp_valid;                                                     // pio64_out_2_s0_agent:rp_valid -> router_007:sink_valid
	wire  [144:0] pio64_out_2_s0_agent_rp_data;                                                      // pio64_out_2_s0_agent:rp_data -> router_007:sink_data
	wire          pio64_out_2_s0_agent_rp_ready;                                                     // router_007:sink_ready -> pio64_out_2_s0_agent:rp_ready
	wire          pio64_out_2_s0_agent_rp_startofpacket;                                             // pio64_out_2_s0_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          pio64_out_2_s0_agent_rp_endofpacket;                                               // pio64_out_2_s0_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                              // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [144:0] router_007_src_data;                                                               // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                              // rsp_demux_005:sink_ready -> router_007:src_ready
	wire    [9:0] router_007_src_channel;                                                            // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                      // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                        // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          pio64_in_0_s0_agent_rp_valid;                                                      // pio64_in_0_s0_agent:rp_valid -> router_008:sink_valid
	wire  [144:0] pio64_in_0_s0_agent_rp_data;                                                       // pio64_in_0_s0_agent:rp_data -> router_008:sink_data
	wire          pio64_in_0_s0_agent_rp_ready;                                                      // router_008:sink_ready -> pio64_in_0_s0_agent:rp_ready
	wire          pio64_in_0_s0_agent_rp_startofpacket;                                              // pio64_in_0_s0_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          pio64_in_0_s0_agent_rp_endofpacket;                                                // pio64_in_0_s0_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                              // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [144:0] router_008_src_data;                                                               // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                              // rsp_demux_006:sink_ready -> router_008:src_ready
	wire    [9:0] router_008_src_channel;                                                            // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                      // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                        // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          led_pio_s1_agent_rp_valid;                                                         // led_pio_s1_agent:rp_valid -> router_009:sink_valid
	wire  [108:0] led_pio_s1_agent_rp_data;                                                          // led_pio_s1_agent:rp_data -> router_009:sink_data
	wire          led_pio_s1_agent_rp_ready;                                                         // router_009:sink_ready -> led_pio_s1_agent:rp_ready
	wire          led_pio_s1_agent_rp_startofpacket;                                                 // led_pio_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          led_pio_s1_agent_rp_endofpacket;                                                   // led_pio_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                              // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [108:0] router_009_src_data;                                                               // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                              // rsp_demux_007:sink_ready -> router_009:src_ready
	wire    [9:0] router_009_src_channel;                                                            // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                      // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                        // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          dipsw_pio_s1_agent_rp_valid;                                                       // dipsw_pio_s1_agent:rp_valid -> router_010:sink_valid
	wire  [108:0] dipsw_pio_s1_agent_rp_data;                                                        // dipsw_pio_s1_agent:rp_data -> router_010:sink_data
	wire          dipsw_pio_s1_agent_rp_ready;                                                       // router_010:sink_ready -> dipsw_pio_s1_agent:rp_ready
	wire          dipsw_pio_s1_agent_rp_startofpacket;                                               // dipsw_pio_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          dipsw_pio_s1_agent_rp_endofpacket;                                                 // dipsw_pio_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                              // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [108:0] router_010_src_data;                                                               // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                              // rsp_demux_008:sink_ready -> router_010:src_ready
	wire    [9:0] router_010_src_channel;                                                            // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                                      // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                        // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          button_pio_s1_agent_rp_valid;                                                      // button_pio_s1_agent:rp_valid -> router_011:sink_valid
	wire  [108:0] button_pio_s1_agent_rp_data;                                                       // button_pio_s1_agent:rp_data -> router_011:sink_data
	wire          button_pio_s1_agent_rp_ready;                                                      // router_011:sink_ready -> button_pio_s1_agent:rp_ready
	wire          button_pio_s1_agent_rp_startofpacket;                                              // button_pio_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          button_pio_s1_agent_rp_endofpacket;                                                // button_pio_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                              // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [108:0] router_011_src_data;                                                               // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                                              // rsp_demux_009:sink_ready -> router_011:src_ready
	wire    [9:0] router_011_src_channel;                                                            // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                                      // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                                        // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          router_src_valid;                                                                  // router:src_valid -> mm_bridge_0_m0_limiter:cmd_sink_valid
	wire  [144:0] router_src_data;                                                                   // router:src_data -> mm_bridge_0_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                                  // mm_bridge_0_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [9:0] router_src_channel;                                                                // router:src_channel -> mm_bridge_0_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                          // router:src_startofpacket -> mm_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                            // router:src_endofpacket -> mm_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire  [144:0] mm_bridge_0_m0_limiter_cmd_src_data;                                               // mm_bridge_0_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          mm_bridge_0_m0_limiter_cmd_src_ready;                                              // cmd_demux:sink_ready -> mm_bridge_0_m0_limiter:cmd_src_ready
	wire    [9:0] mm_bridge_0_m0_limiter_cmd_src_channel;                                            // mm_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          mm_bridge_0_m0_limiter_cmd_src_startofpacket;                                      // mm_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          mm_bridge_0_m0_limiter_cmd_src_endofpacket;                                        // mm_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                 // rsp_mux:src_valid -> mm_bridge_0_m0_limiter:rsp_sink_valid
	wire  [144:0] rsp_mux_src_data;                                                                  // rsp_mux:src_data -> mm_bridge_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                 // mm_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [9:0] rsp_mux_src_channel;                                                               // rsp_mux:src_channel -> mm_bridge_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                         // rsp_mux:src_startofpacket -> mm_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                           // rsp_mux:src_endofpacket -> mm_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire          mm_bridge_0_m0_limiter_rsp_src_valid;                                              // mm_bridge_0_m0_limiter:rsp_src_valid -> mm_bridge_0_m0_agent:rp_valid
	wire  [144:0] mm_bridge_0_m0_limiter_rsp_src_data;                                               // mm_bridge_0_m0_limiter:rsp_src_data -> mm_bridge_0_m0_agent:rp_data
	wire          mm_bridge_0_m0_limiter_rsp_src_ready;                                              // mm_bridge_0_m0_agent:rp_ready -> mm_bridge_0_m0_limiter:rsp_src_ready
	wire    [9:0] mm_bridge_0_m0_limiter_rsp_src_channel;                                            // mm_bridge_0_m0_limiter:rsp_src_channel -> mm_bridge_0_m0_agent:rp_channel
	wire          mm_bridge_0_m0_limiter_rsp_src_startofpacket;                                      // mm_bridge_0_m0_limiter:rsp_src_startofpacket -> mm_bridge_0_m0_agent:rp_startofpacket
	wire          mm_bridge_0_m0_limiter_rsp_src_endofpacket;                                        // mm_bridge_0_m0_limiter:rsp_src_endofpacket -> mm_bridge_0_m0_agent:rp_endofpacket
	wire          router_001_src_valid;                                                              // router_001:src_valid -> fpga_only_master_master_limiter:cmd_sink_valid
	wire  [108:0] router_001_src_data;                                                               // router_001:src_data -> fpga_only_master_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                              // fpga_only_master_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [9:0] router_001_src_channel;                                                            // router_001:src_channel -> fpga_only_master_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                      // router_001:src_startofpacket -> fpga_only_master_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                        // router_001:src_endofpacket -> fpga_only_master_master_limiter:cmd_sink_endofpacket
	wire  [108:0] fpga_only_master_master_limiter_cmd_src_data;                                      // fpga_only_master_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          fpga_only_master_master_limiter_cmd_src_ready;                                     // cmd_demux_001:sink_ready -> fpga_only_master_master_limiter:cmd_src_ready
	wire    [9:0] fpga_only_master_master_limiter_cmd_src_channel;                                   // fpga_only_master_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          fpga_only_master_master_limiter_cmd_src_startofpacket;                             // fpga_only_master_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          fpga_only_master_master_limiter_cmd_src_endofpacket;                               // fpga_only_master_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                             // rsp_mux_001:src_valid -> fpga_only_master_master_limiter:rsp_sink_valid
	wire  [108:0] rsp_mux_001_src_data;                                                              // rsp_mux_001:src_data -> fpga_only_master_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                             // fpga_only_master_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [9:0] rsp_mux_001_src_channel;                                                           // rsp_mux_001:src_channel -> fpga_only_master_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                     // rsp_mux_001:src_startofpacket -> fpga_only_master_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                       // rsp_mux_001:src_endofpacket -> fpga_only_master_master_limiter:rsp_sink_endofpacket
	wire          fpga_only_master_master_limiter_rsp_src_valid;                                     // fpga_only_master_master_limiter:rsp_src_valid -> fpga_only_master_master_agent:rp_valid
	wire  [108:0] fpga_only_master_master_limiter_rsp_src_data;                                      // fpga_only_master_master_limiter:rsp_src_data -> fpga_only_master_master_agent:rp_data
	wire          fpga_only_master_master_limiter_rsp_src_ready;                                     // fpga_only_master_master_agent:rp_ready -> fpga_only_master_master_limiter:rsp_src_ready
	wire    [9:0] fpga_only_master_master_limiter_rsp_src_channel;                                   // fpga_only_master_master_limiter:rsp_src_channel -> fpga_only_master_master_agent:rp_channel
	wire          fpga_only_master_master_limiter_rsp_src_startofpacket;                             // fpga_only_master_master_limiter:rsp_src_startofpacket -> fpga_only_master_master_agent:rp_startofpacket
	wire          fpga_only_master_master_limiter_rsp_src_endofpacket;                               // fpga_only_master_master_limiter:rsp_src_endofpacket -> fpga_only_master_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                                 // cmd_mux:src_valid -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [108:0] cmd_mux_src_data;                                                                  // cmd_mux:src_data -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                 // jtag_uart_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [9:0] cmd_mux_src_channel;                                                               // cmd_mux:src_channel -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                         // cmd_mux:src_startofpacket -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                           // cmd_mux:src_endofpacket -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid;                           // jtag_uart_avalon_jtag_slave_burst_adapter:source0_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [108:0] jtag_uart_avalon_jtag_slave_burst_adapter_source0_data;                            // jtag_uart_avalon_jtag_slave_burst_adapter:source0_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready;                           // jtag_uart_avalon_jtag_slave_agent:cp_ready -> jtag_uart_avalon_jtag_slave_burst_adapter:source0_ready
	wire    [9:0] jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel;                         // jtag_uart_avalon_jtag_slave_burst_adapter:source0_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket;                   // jtag_uart_avalon_jtag_slave_burst_adapter:source0_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket;                     // jtag_uart_avalon_jtag_slave_burst_adapter:source0_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                             // cmd_mux_001:src_valid -> ILC_avalon_slave_burst_adapter:sink0_valid
	wire  [108:0] cmd_mux_001_src_data;                                                              // cmd_mux_001:src_data -> ILC_avalon_slave_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                             // ILC_avalon_slave_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [9:0] cmd_mux_001_src_channel;                                                           // cmd_mux_001:src_channel -> ILC_avalon_slave_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                     // cmd_mux_001:src_startofpacket -> ILC_avalon_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                       // cmd_mux_001:src_endofpacket -> ILC_avalon_slave_burst_adapter:sink0_endofpacket
	wire          ilc_avalon_slave_burst_adapter_source0_valid;                                      // ILC_avalon_slave_burst_adapter:source0_valid -> ILC_avalon_slave_agent:cp_valid
	wire  [108:0] ilc_avalon_slave_burst_adapter_source0_data;                                       // ILC_avalon_slave_burst_adapter:source0_data -> ILC_avalon_slave_agent:cp_data
	wire          ilc_avalon_slave_burst_adapter_source0_ready;                                      // ILC_avalon_slave_agent:cp_ready -> ILC_avalon_slave_burst_adapter:source0_ready
	wire    [9:0] ilc_avalon_slave_burst_adapter_source0_channel;                                    // ILC_avalon_slave_burst_adapter:source0_channel -> ILC_avalon_slave_agent:cp_channel
	wire          ilc_avalon_slave_burst_adapter_source0_startofpacket;                              // ILC_avalon_slave_burst_adapter:source0_startofpacket -> ILC_avalon_slave_agent:cp_startofpacket
	wire          ilc_avalon_slave_burst_adapter_source0_endofpacket;                                // ILC_avalon_slave_burst_adapter:source0_endofpacket -> ILC_avalon_slave_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                             // cmd_mux_002:src_valid -> sysid_qsys_control_slave_burst_adapter:sink0_valid
	wire  [108:0] cmd_mux_002_src_data;                                                              // cmd_mux_002:src_data -> sysid_qsys_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                             // sysid_qsys_control_slave_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [9:0] cmd_mux_002_src_channel;                                                           // cmd_mux_002:src_channel -> sysid_qsys_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                     // cmd_mux_002:src_startofpacket -> sysid_qsys_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                       // cmd_mux_002:src_endofpacket -> sysid_qsys_control_slave_burst_adapter:sink0_endofpacket
	wire          sysid_qsys_control_slave_burst_adapter_source0_valid;                              // sysid_qsys_control_slave_burst_adapter:source0_valid -> sysid_qsys_control_slave_agent:cp_valid
	wire  [108:0] sysid_qsys_control_slave_burst_adapter_source0_data;                               // sysid_qsys_control_slave_burst_adapter:source0_data -> sysid_qsys_control_slave_agent:cp_data
	wire          sysid_qsys_control_slave_burst_adapter_source0_ready;                              // sysid_qsys_control_slave_agent:cp_ready -> sysid_qsys_control_slave_burst_adapter:source0_ready
	wire    [9:0] sysid_qsys_control_slave_burst_adapter_source0_channel;                            // sysid_qsys_control_slave_burst_adapter:source0_channel -> sysid_qsys_control_slave_agent:cp_channel
	wire          sysid_qsys_control_slave_burst_adapter_source0_startofpacket;                      // sysid_qsys_control_slave_burst_adapter:source0_startofpacket -> sysid_qsys_control_slave_agent:cp_startofpacket
	wire          sysid_qsys_control_slave_burst_adapter_source0_endofpacket;                        // sysid_qsys_control_slave_burst_adapter:source0_endofpacket -> sysid_qsys_control_slave_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                             // cmd_mux_007:src_valid -> led_pio_s1_burst_adapter:sink0_valid
	wire  [108:0] cmd_mux_007_src_data;                                                              // cmd_mux_007:src_data -> led_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                             // led_pio_s1_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire    [9:0] cmd_mux_007_src_channel;                                                           // cmd_mux_007:src_channel -> led_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                                     // cmd_mux_007:src_startofpacket -> led_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                       // cmd_mux_007:src_endofpacket -> led_pio_s1_burst_adapter:sink0_endofpacket
	wire          led_pio_s1_burst_adapter_source0_valid;                                            // led_pio_s1_burst_adapter:source0_valid -> led_pio_s1_agent:cp_valid
	wire  [108:0] led_pio_s1_burst_adapter_source0_data;                                             // led_pio_s1_burst_adapter:source0_data -> led_pio_s1_agent:cp_data
	wire          led_pio_s1_burst_adapter_source0_ready;                                            // led_pio_s1_agent:cp_ready -> led_pio_s1_burst_adapter:source0_ready
	wire    [9:0] led_pio_s1_burst_adapter_source0_channel;                                          // led_pio_s1_burst_adapter:source0_channel -> led_pio_s1_agent:cp_channel
	wire          led_pio_s1_burst_adapter_source0_startofpacket;                                    // led_pio_s1_burst_adapter:source0_startofpacket -> led_pio_s1_agent:cp_startofpacket
	wire          led_pio_s1_burst_adapter_source0_endofpacket;                                      // led_pio_s1_burst_adapter:source0_endofpacket -> led_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                             // cmd_mux_008:src_valid -> dipsw_pio_s1_burst_adapter:sink0_valid
	wire  [108:0] cmd_mux_008_src_data;                                                              // cmd_mux_008:src_data -> dipsw_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                             // dipsw_pio_s1_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire    [9:0] cmd_mux_008_src_channel;                                                           // cmd_mux_008:src_channel -> dipsw_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                                     // cmd_mux_008:src_startofpacket -> dipsw_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                       // cmd_mux_008:src_endofpacket -> dipsw_pio_s1_burst_adapter:sink0_endofpacket
	wire          dipsw_pio_s1_burst_adapter_source0_valid;                                          // dipsw_pio_s1_burst_adapter:source0_valid -> dipsw_pio_s1_agent:cp_valid
	wire  [108:0] dipsw_pio_s1_burst_adapter_source0_data;                                           // dipsw_pio_s1_burst_adapter:source0_data -> dipsw_pio_s1_agent:cp_data
	wire          dipsw_pio_s1_burst_adapter_source0_ready;                                          // dipsw_pio_s1_agent:cp_ready -> dipsw_pio_s1_burst_adapter:source0_ready
	wire    [9:0] dipsw_pio_s1_burst_adapter_source0_channel;                                        // dipsw_pio_s1_burst_adapter:source0_channel -> dipsw_pio_s1_agent:cp_channel
	wire          dipsw_pio_s1_burst_adapter_source0_startofpacket;                                  // dipsw_pio_s1_burst_adapter:source0_startofpacket -> dipsw_pio_s1_agent:cp_startofpacket
	wire          dipsw_pio_s1_burst_adapter_source0_endofpacket;                                    // dipsw_pio_s1_burst_adapter:source0_endofpacket -> dipsw_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                             // cmd_mux_009:src_valid -> button_pio_s1_burst_adapter:sink0_valid
	wire  [108:0] cmd_mux_009_src_data;                                                              // cmd_mux_009:src_data -> button_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                                             // button_pio_s1_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire    [9:0] cmd_mux_009_src_channel;                                                           // cmd_mux_009:src_channel -> button_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                                     // cmd_mux_009:src_startofpacket -> button_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                       // cmd_mux_009:src_endofpacket -> button_pio_s1_burst_adapter:sink0_endofpacket
	wire          button_pio_s1_burst_adapter_source0_valid;                                         // button_pio_s1_burst_adapter:source0_valid -> button_pio_s1_agent:cp_valid
	wire  [108:0] button_pio_s1_burst_adapter_source0_data;                                          // button_pio_s1_burst_adapter:source0_data -> button_pio_s1_agent:cp_data
	wire          button_pio_s1_burst_adapter_source0_ready;                                         // button_pio_s1_agent:cp_ready -> button_pio_s1_burst_adapter:source0_ready
	wire    [9:0] button_pio_s1_burst_adapter_source0_channel;                                       // button_pio_s1_burst_adapter:source0_channel -> button_pio_s1_agent:cp_channel
	wire          button_pio_s1_burst_adapter_source0_startofpacket;                                 // button_pio_s1_burst_adapter:source0_startofpacket -> button_pio_s1_agent:cp_startofpacket
	wire          button_pio_s1_burst_adapter_source0_endofpacket;                                   // button_pio_s1_burst_adapter:source0_endofpacket -> button_pio_s1_agent:cp_endofpacket
	wire          cmd_demux_src3_valid;                                                              // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [144:0] cmd_demux_src3_data;                                                               // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                              // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [9:0] cmd_demux_src3_channel;                                                            // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                      // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                        // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                              // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [144:0] cmd_demux_src4_data;                                                               // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                              // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [9:0] cmd_demux_src4_channel;                                                            // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                      // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                        // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                              // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [144:0] cmd_demux_src5_data;                                                               // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                              // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire    [9:0] cmd_demux_src5_channel;                                                            // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                      // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                        // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                              // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [144:0] cmd_demux_src6_data;                                                               // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                              // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire    [9:0] cmd_demux_src6_channel;                                                            // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                      // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                        // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                          // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [108:0] cmd_demux_001_src0_data;                                                           // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                          // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [9:0] cmd_demux_001_src0_channel;                                                        // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                  // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                    // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                          // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [108:0] cmd_demux_001_src1_data;                                                           // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                                          // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [9:0] cmd_demux_001_src1_channel;                                                        // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                  // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                    // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                          // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [108:0] cmd_demux_001_src2_data;                                                           // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                                          // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [9:0] cmd_demux_001_src2_channel;                                                        // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                  // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                    // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                          // cmd_demux_001:src3_valid -> cmd_mux_007:sink1_valid
	wire  [108:0] cmd_demux_001_src3_data;                                                           // cmd_demux_001:src3_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src3_ready;                                                          // cmd_mux_007:sink1_ready -> cmd_demux_001:src3_ready
	wire    [9:0] cmd_demux_001_src3_channel;                                                        // cmd_demux_001:src3_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                                  // cmd_demux_001:src3_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                    // cmd_demux_001:src3_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                          // cmd_demux_001:src4_valid -> cmd_mux_008:sink1_valid
	wire  [108:0] cmd_demux_001_src4_data;                                                           // cmd_demux_001:src4_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src4_ready;                                                          // cmd_mux_008:sink1_ready -> cmd_demux_001:src4_ready
	wire    [9:0] cmd_demux_001_src4_channel;                                                        // cmd_demux_001:src4_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                                  // cmd_demux_001:src4_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                    // cmd_demux_001:src4_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                          // cmd_demux_001:src5_valid -> cmd_mux_009:sink1_valid
	wire  [108:0] cmd_demux_001_src5_data;                                                           // cmd_demux_001:src5_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_001_src5_ready;                                                          // cmd_mux_009:sink1_ready -> cmd_demux_001:src5_ready
	wire    [9:0] cmd_demux_001_src5_channel;                                                        // cmd_demux_001:src5_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                                  // cmd_demux_001:src5_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                    // cmd_demux_001:src5_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          rsp_demux_src1_valid;                                                              // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [108:0] rsp_demux_src1_data;                                                               // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                              // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [9:0] rsp_demux_src1_channel;                                                            // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                      // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                        // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src1_valid;                                                          // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [108:0] rsp_demux_001_src1_data;                                                           // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                                          // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [9:0] rsp_demux_001_src1_channel;                                                        // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                                  // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                    // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src1_valid;                                                          // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [108:0] rsp_demux_002_src1_data;                                                           // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                                          // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [9:0] rsp_demux_002_src1_channel;                                                        // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                                  // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                    // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                          // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [144:0] rsp_demux_003_src0_data;                                                           // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                          // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [9:0] rsp_demux_003_src0_channel;                                                        // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                  // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                    // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                          // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [144:0] rsp_demux_004_src0_data;                                                           // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                          // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [9:0] rsp_demux_004_src0_channel;                                                        // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                  // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                    // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                          // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [144:0] rsp_demux_005_src0_data;                                                           // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                          // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire    [9:0] rsp_demux_005_src0_channel;                                                        // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                  // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                    // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                          // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [144:0] rsp_demux_006_src0_data;                                                           // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                          // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire    [9:0] rsp_demux_006_src0_channel;                                                        // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                  // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                    // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src1_valid;                                                          // rsp_demux_007:src1_valid -> rsp_mux_001:sink3_valid
	wire  [108:0] rsp_demux_007_src1_data;                                                           // rsp_demux_007:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_007_src1_ready;                                                          // rsp_mux_001:sink3_ready -> rsp_demux_007:src1_ready
	wire    [9:0] rsp_demux_007_src1_channel;                                                        // rsp_demux_007:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_007_src1_startofpacket;                                                  // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                    // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_008_src1_valid;                                                          // rsp_demux_008:src1_valid -> rsp_mux_001:sink4_valid
	wire  [108:0] rsp_demux_008_src1_data;                                                           // rsp_demux_008:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_008_src1_ready;                                                          // rsp_mux_001:sink4_ready -> rsp_demux_008:src1_ready
	wire    [9:0] rsp_demux_008_src1_channel;                                                        // rsp_demux_008:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_008_src1_startofpacket;                                                  // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                    // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_009_src1_valid;                                                          // rsp_demux_009:src1_valid -> rsp_mux_001:sink5_valid
	wire  [108:0] rsp_demux_009_src1_data;                                                           // rsp_demux_009:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_009_src1_ready;                                                          // rsp_mux_001:sink5_ready -> rsp_demux_009:src1_ready
	wire    [9:0] rsp_demux_009_src1_channel;                                                        // rsp_demux_009:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_009_src1_startofpacket;                                                  // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                    // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          cmd_demux_src0_valid;                                                              // cmd_demux:src0_valid -> mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter:in_valid
	wire  [144:0] cmd_demux_src0_data;                                                               // cmd_demux:src0_data -> mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter:in_data
	wire          cmd_demux_src0_ready;                                                              // mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter:in_ready -> cmd_demux:src0_ready
	wire    [9:0] cmd_demux_src0_channel;                                                            // cmd_demux:src0_channel -> mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src0_startofpacket;                                                      // cmd_demux:src0_startofpacket -> mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                        // cmd_demux:src0_endofpacket -> mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter:in_endofpacket
	wire          mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter_src_valid;         // mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter:out_valid -> cmd_mux:sink0_valid
	wire  [108:0] mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter_src_data;          // mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter:out_data -> cmd_mux:sink0_data
	wire          mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter_src_ready;         // cmd_mux:sink0_ready -> mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter:out_ready
	wire    [9:0] mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter_src_channel;       // mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter:out_channel -> cmd_mux:sink0_channel
	wire          mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter_src_startofpacket; // mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter_src_endofpacket;   // mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                              // cmd_demux:src1_valid -> mm_bridge_0_m0_to_ILC_avalon_slave_cmd_width_adapter:in_valid
	wire  [144:0] cmd_demux_src1_data;                                                               // cmd_demux:src1_data -> mm_bridge_0_m0_to_ILC_avalon_slave_cmd_width_adapter:in_data
	wire          cmd_demux_src1_ready;                                                              // mm_bridge_0_m0_to_ILC_avalon_slave_cmd_width_adapter:in_ready -> cmd_demux:src1_ready
	wire    [9:0] cmd_demux_src1_channel;                                                            // cmd_demux:src1_channel -> mm_bridge_0_m0_to_ILC_avalon_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src1_startofpacket;                                                      // cmd_demux:src1_startofpacket -> mm_bridge_0_m0_to_ILC_avalon_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                        // cmd_demux:src1_endofpacket -> mm_bridge_0_m0_to_ILC_avalon_slave_cmd_width_adapter:in_endofpacket
	wire          mm_bridge_0_m0_to_ilc_avalon_slave_cmd_width_adapter_src_valid;                    // mm_bridge_0_m0_to_ILC_avalon_slave_cmd_width_adapter:out_valid -> cmd_mux_001:sink0_valid
	wire  [108:0] mm_bridge_0_m0_to_ilc_avalon_slave_cmd_width_adapter_src_data;                     // mm_bridge_0_m0_to_ILC_avalon_slave_cmd_width_adapter:out_data -> cmd_mux_001:sink0_data
	wire          mm_bridge_0_m0_to_ilc_avalon_slave_cmd_width_adapter_src_ready;                    // cmd_mux_001:sink0_ready -> mm_bridge_0_m0_to_ILC_avalon_slave_cmd_width_adapter:out_ready
	wire    [9:0] mm_bridge_0_m0_to_ilc_avalon_slave_cmd_width_adapter_src_channel;                  // mm_bridge_0_m0_to_ILC_avalon_slave_cmd_width_adapter:out_channel -> cmd_mux_001:sink0_channel
	wire          mm_bridge_0_m0_to_ilc_avalon_slave_cmd_width_adapter_src_startofpacket;            // mm_bridge_0_m0_to_ILC_avalon_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mm_bridge_0_m0_to_ilc_avalon_slave_cmd_width_adapter_src_endofpacket;              // mm_bridge_0_m0_to_ILC_avalon_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                              // cmd_demux:src2_valid -> mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter:in_valid
	wire  [144:0] cmd_demux_src2_data;                                                               // cmd_demux:src2_data -> mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter:in_data
	wire          cmd_demux_src2_ready;                                                              // mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter:in_ready -> cmd_demux:src2_ready
	wire    [9:0] cmd_demux_src2_channel;                                                            // cmd_demux:src2_channel -> mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src2_startofpacket;                                                      // cmd_demux:src2_startofpacket -> mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                        // cmd_demux:src2_endofpacket -> mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter:in_endofpacket
	wire          mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter_src_valid;            // mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter:out_valid -> cmd_mux_002:sink0_valid
	wire  [108:0] mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter_src_data;             // mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter:out_data -> cmd_mux_002:sink0_data
	wire          mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter_src_ready;            // cmd_mux_002:sink0_ready -> mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter:out_ready
	wire    [9:0] mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter_src_channel;          // mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter:out_channel -> cmd_mux_002:sink0_channel
	wire          mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter_src_startofpacket;    // mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter_src_endofpacket;      // mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                              // cmd_demux:src7_valid -> mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter:in_valid
	wire  [144:0] cmd_demux_src7_data;                                                               // cmd_demux:src7_data -> mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src7_ready;                                                              // mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter:in_ready -> cmd_demux:src7_ready
	wire    [9:0] cmd_demux_src7_channel;                                                            // cmd_demux:src7_channel -> mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src7_startofpacket;                                                      // cmd_demux:src7_startofpacket -> mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                        // cmd_demux:src7_endofpacket -> mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter:in_endofpacket
	wire          mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter_src_valid;                          // mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter:out_valid -> cmd_mux_007:sink0_valid
	wire  [108:0] mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter_src_data;                           // mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter:out_data -> cmd_mux_007:sink0_data
	wire          mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter_src_ready;                          // cmd_mux_007:sink0_ready -> mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter:out_ready
	wire    [9:0] mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter_src_channel;                        // mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter:out_channel -> cmd_mux_007:sink0_channel
	wire          mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter_src_startofpacket;                  // mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter_src_endofpacket;                    // mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                              // cmd_demux:src8_valid -> mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter:in_valid
	wire  [144:0] cmd_demux_src8_data;                                                               // cmd_demux:src8_data -> mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src8_ready;                                                              // mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter:in_ready -> cmd_demux:src8_ready
	wire    [9:0] cmd_demux_src8_channel;                                                            // cmd_demux:src8_channel -> mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src8_startofpacket;                                                      // cmd_demux:src8_startofpacket -> mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                        // cmd_demux:src8_endofpacket -> mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter:in_endofpacket
	wire          mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter_src_valid;                        // mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter:out_valid -> cmd_mux_008:sink0_valid
	wire  [108:0] mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter_src_data;                         // mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter:out_data -> cmd_mux_008:sink0_data
	wire          mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter_src_ready;                        // cmd_mux_008:sink0_ready -> mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter:out_ready
	wire    [9:0] mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter_src_channel;                      // mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter:out_channel -> cmd_mux_008:sink0_channel
	wire          mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter_src_startofpacket;                // mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter_src_endofpacket;                  // mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                              // cmd_demux:src9_valid -> mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter:in_valid
	wire  [144:0] cmd_demux_src9_data;                                                               // cmd_demux:src9_data -> mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src9_ready;                                                              // mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter:in_ready -> cmd_demux:src9_ready
	wire    [9:0] cmd_demux_src9_channel;                                                            // cmd_demux:src9_channel -> mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src9_startofpacket;                                                      // cmd_demux:src9_startofpacket -> mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                        // cmd_demux:src9_endofpacket -> mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter:in_endofpacket
	wire          mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter_src_valid;                       // mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter:out_valid -> cmd_mux_009:sink0_valid
	wire  [108:0] mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter_src_data;                        // mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter:out_data -> cmd_mux_009:sink0_data
	wire          mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter_src_ready;                       // cmd_mux_009:sink0_ready -> mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter:out_ready
	wire    [9:0] mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter_src_channel;                     // mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter:out_channel -> cmd_mux_009:sink0_channel
	wire          mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter_src_startofpacket;               // mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter_src_endofpacket;                 // mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                              // rsp_demux:src0_valid -> jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_valid
	wire  [108:0] rsp_demux_src0_data;                                                               // rsp_demux:src0_data -> jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_data
	wire          rsp_demux_src0_ready;                                                              // jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_ready -> rsp_demux:src0_ready
	wire    [9:0] rsp_demux_src0_channel;                                                            // rsp_demux:src0_channel -> jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_src0_startofpacket;                                                      // rsp_demux:src0_startofpacket -> jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                        // rsp_demux:src0_endofpacket -> jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_valid;         // jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_valid -> rsp_mux:sink0_valid
	wire  [144:0] jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_data;          // jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_data -> rsp_mux:sink0_data
	wire          jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_ready;         // rsp_mux:sink0_ready -> jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_ready
	wire    [9:0] jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_channel;       // jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_channel -> rsp_mux:sink0_channel
	wire          jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket; // jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket;   // jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                          // rsp_demux_001:src0_valid -> ILC_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_valid
	wire  [108:0] rsp_demux_001_src0_data;                                                           // rsp_demux_001:src0_data -> ILC_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_data
	wire          rsp_demux_001_src0_ready;                                                          // ILC_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_ready -> rsp_demux_001:src0_ready
	wire    [9:0] rsp_demux_001_src0_channel;                                                        // rsp_demux_001:src0_channel -> ILC_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                  // rsp_demux_001:src0_startofpacket -> ILC_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                    // rsp_demux_001:src0_endofpacket -> ILC_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_endofpacket
	wire          ilc_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_valid;                    // ILC_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_valid -> rsp_mux:sink1_valid
	wire  [144:0] ilc_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_data;                     // ILC_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_data -> rsp_mux:sink1_data
	wire          ilc_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_ready;                    // rsp_mux:sink1_ready -> ILC_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_ready
	wire    [9:0] ilc_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_channel;                  // ILC_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_channel -> rsp_mux:sink1_channel
	wire          ilc_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket;            // ILC_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          ilc_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket;              // ILC_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                          // rsp_demux_002:src0_valid -> sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_valid
	wire  [108:0] rsp_demux_002_src0_data;                                                           // rsp_demux_002:src0_data -> sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_data
	wire          rsp_demux_002_src0_ready;                                                          // sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_ready -> rsp_demux_002:src0_ready
	wire    [9:0] rsp_demux_002_src0_channel;                                                        // rsp_demux_002:src0_channel -> sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                                  // rsp_demux_002:src0_startofpacket -> sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                    // rsp_demux_002:src0_endofpacket -> sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_endofpacket
	wire          sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_valid;            // sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_valid -> rsp_mux:sink2_valid
	wire  [144:0] sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_data;             // sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_data -> rsp_mux:sink2_data
	wire          sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_ready;            // rsp_mux:sink2_ready -> sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_ready
	wire    [9:0] sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_channel;          // sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_channel -> rsp_mux:sink2_channel
	wire          sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket;    // sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket;      // sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_007_src0_valid;                                                          // rsp_demux_007:src0_valid -> led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_valid
	wire  [108:0] rsp_demux_007_src0_data;                                                           // rsp_demux_007:src0_data -> led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_data
	wire          rsp_demux_007_src0_ready;                                                          // led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_ready -> rsp_demux_007:src0_ready
	wire    [9:0] rsp_demux_007_src0_channel;                                                        // rsp_demux_007:src0_channel -> led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                                  // rsp_demux_007:src0_startofpacket -> led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                    // rsp_demux_007:src0_endofpacket -> led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_endofpacket
	wire          led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_valid;                          // led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_valid -> rsp_mux:sink7_valid
	wire  [144:0] led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_data;                           // led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_data -> rsp_mux:sink7_data
	wire          led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_ready;                          // rsp_mux:sink7_ready -> led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_ready
	wire    [9:0] led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_channel;                        // led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_channel -> rsp_mux:sink7_channel
	wire          led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket;                  // led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire          led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket;                    // led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                          // rsp_demux_008:src0_valid -> dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_valid
	wire  [108:0] rsp_demux_008_src0_data;                                                           // rsp_demux_008:src0_data -> dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_data
	wire          rsp_demux_008_src0_ready;                                                          // dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_ready -> rsp_demux_008:src0_ready
	wire    [9:0] rsp_demux_008_src0_channel;                                                        // rsp_demux_008:src0_channel -> dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_008_src0_startofpacket;                                                  // rsp_demux_008:src0_startofpacket -> dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                    // rsp_demux_008:src0_endofpacket -> dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_endofpacket
	wire          dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_valid;                        // dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_valid -> rsp_mux:sink8_valid
	wire  [144:0] dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_data;                         // dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_data -> rsp_mux:sink8_data
	wire          dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_ready;                        // rsp_mux:sink8_ready -> dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_ready
	wire    [9:0] dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_channel;                      // dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_channel -> rsp_mux:sink8_channel
	wire          dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket;                // dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink8_startofpacket
	wire          dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket;                  // dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                          // rsp_demux_009:src0_valid -> button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_valid
	wire  [108:0] rsp_demux_009_src0_data;                                                           // rsp_demux_009:src0_data -> button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_data
	wire          rsp_demux_009_src0_ready;                                                          // button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_ready -> rsp_demux_009:src0_ready
	wire    [9:0] rsp_demux_009_src0_channel;                                                        // rsp_demux_009:src0_channel -> button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_009_src0_startofpacket;                                                  // rsp_demux_009:src0_startofpacket -> button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                    // rsp_demux_009:src0_endofpacket -> button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_endofpacket
	wire          button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_valid;                       // button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_valid -> rsp_mux:sink9_valid
	wire  [144:0] button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_data;                        // button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_data -> rsp_mux:sink9_data
	wire          button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_ready;                       // rsp_mux:sink9_ready -> button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_ready
	wire    [9:0] button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_channel;                     // button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_channel -> rsp_mux:sink9_channel
	wire          button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket;               // button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink9_startofpacket
	wire          button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket;                 // button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink9_endofpacket
	wire    [9:0] mm_bridge_0_m0_limiter_cmd_valid_data;                                             // mm_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [9:0] fpga_only_master_master_limiter_cmd_valid_data;                                    // fpga_only_master_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                            // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                             // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter:in_0_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                     // avalon_st_adapter:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                      // avalon_st_adapter:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                     // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                     // avalon_st_adapter:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          ilc_avalon_slave_agent_rdata_fifo_src_valid;                                       // ILC_avalon_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] ilc_avalon_slave_agent_rdata_fifo_src_data;                                        // ILC_avalon_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          ilc_avalon_slave_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_001:in_0_ready -> ILC_avalon_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                 // avalon_st_adapter_001:out_0_valid -> ILC_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                  // avalon_st_adapter_001:out_0_data -> ILC_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                 // ILC_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                 // avalon_st_adapter_001:out_0_error -> ILC_avalon_slave_agent:rdata_fifo_sink_error
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_valid;                               // sysid_qsys_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_src_data;                                // sysid_qsys_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_ready;                               // avalon_st_adapter_002:in_0_ready -> sysid_qsys_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                 // avalon_st_adapter_002:out_0_valid -> sysid_qsys_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                  // avalon_st_adapter_002:out_0_data -> sysid_qsys_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                 // sysid_qsys_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                 // avalon_st_adapter_002:out_0_error -> sysid_qsys_control_slave_agent:rdata_fifo_sink_error
	wire          pio64_out_0_s0_agent_rdata_fifo_src_valid;                                         // pio64_out_0_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [65:0] pio64_out_0_s0_agent_rdata_fifo_src_data;                                          // pio64_out_0_s0_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          pio64_out_0_s0_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_003:in_0_ready -> pio64_out_0_s0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                 // avalon_st_adapter_003:out_0_valid -> pio64_out_0_s0_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_003_out_0_data;                                                  // avalon_st_adapter_003:out_0_data -> pio64_out_0_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                 // pio64_out_0_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                 // avalon_st_adapter_003:out_0_error -> pio64_out_0_s0_agent:rdata_fifo_sink_error
	wire          pio64_out_1_s0_agent_rdata_fifo_src_valid;                                         // pio64_out_1_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [65:0] pio64_out_1_s0_agent_rdata_fifo_src_data;                                          // pio64_out_1_s0_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          pio64_out_1_s0_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_004:in_0_ready -> pio64_out_1_s0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                 // avalon_st_adapter_004:out_0_valid -> pio64_out_1_s0_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_004_out_0_data;                                                  // avalon_st_adapter_004:out_0_data -> pio64_out_1_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                 // pio64_out_1_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                 // avalon_st_adapter_004:out_0_error -> pio64_out_1_s0_agent:rdata_fifo_sink_error
	wire          pio64_out_2_s0_agent_rdata_fifo_src_valid;                                         // pio64_out_2_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [65:0] pio64_out_2_s0_agent_rdata_fifo_src_data;                                          // pio64_out_2_s0_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          pio64_out_2_s0_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_005:in_0_ready -> pio64_out_2_s0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                 // avalon_st_adapter_005:out_0_valid -> pio64_out_2_s0_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_005_out_0_data;                                                  // avalon_st_adapter_005:out_0_data -> pio64_out_2_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                 // pio64_out_2_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                 // avalon_st_adapter_005:out_0_error -> pio64_out_2_s0_agent:rdata_fifo_sink_error
	wire          pio64_in_0_s0_agent_rdata_fifo_src_valid;                                          // pio64_in_0_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [65:0] pio64_in_0_s0_agent_rdata_fifo_src_data;                                           // pio64_in_0_s0_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          pio64_in_0_s0_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_006:in_0_ready -> pio64_in_0_s0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                 // avalon_st_adapter_006:out_0_valid -> pio64_in_0_s0_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_006_out_0_data;                                                  // avalon_st_adapter_006:out_0_data -> pio64_in_0_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                 // pio64_in_0_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                 // avalon_st_adapter_006:out_0_error -> pio64_in_0_s0_agent:rdata_fifo_sink_error
	wire          led_pio_s1_agent_rdata_fifo_src_valid;                                             // led_pio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] led_pio_s1_agent_rdata_fifo_src_data;                                              // led_pio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          led_pio_s1_agent_rdata_fifo_src_ready;                                             // avalon_st_adapter_007:in_0_ready -> led_pio_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                 // avalon_st_adapter_007:out_0_valid -> led_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                  // avalon_st_adapter_007:out_0_data -> led_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                 // led_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                 // avalon_st_adapter_007:out_0_error -> led_pio_s1_agent:rdata_fifo_sink_error
	wire          dipsw_pio_s1_agent_rdata_fifo_src_valid;                                           // dipsw_pio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] dipsw_pio_s1_agent_rdata_fifo_src_data;                                            // dipsw_pio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          dipsw_pio_s1_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_008:in_0_ready -> dipsw_pio_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                 // avalon_st_adapter_008:out_0_valid -> dipsw_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                  // avalon_st_adapter_008:out_0_data -> dipsw_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                 // dipsw_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                 // avalon_st_adapter_008:out_0_error -> dipsw_pio_s1_agent:rdata_fifo_sink_error
	wire          button_pio_s1_agent_rdata_fifo_src_valid;                                          // button_pio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] button_pio_s1_agent_rdata_fifo_src_data;                                           // button_pio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          button_pio_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_009:in_0_ready -> button_pio_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                 // avalon_st_adapter_009:out_0_valid -> button_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                  // avalon_st_adapter_009:out_0_data -> button_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                 // button_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                 // avalon_st_adapter_009:out_0_error -> button_pio_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (18),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (4),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_0_m0_translator (
		.clk                    (clk_0_clk_clk),                                                     //                       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (mm_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (mm_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (mm_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (mm_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (mm_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (mm_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (mm_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (mm_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (mm_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (mm_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                              //               (terminated)
		.av_lock                (1'b0),                                                              //               (terminated)
		.uav_clken              (),                                                                  //               (terminated)
		.av_clken               (1'b1),                                                              //               (terminated)
		.uav_response           (2'b00),                                                             //               (terminated)
		.av_response            (),                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) fpga_only_master_master_translator (
		.clk                    (clk_0_clk_clk),                                                              //                       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (fpga_only_master_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (fpga_only_master_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (fpga_only_master_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (fpga_only_master_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (fpga_only_master_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (fpga_only_master_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (fpga_only_master_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (fpga_only_master_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (fpga_only_master_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (fpga_only_master_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (fpga_only_master_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (fpga_only_master_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (fpga_only_master_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (fpga_only_master_master_byteenable),                                         //                          .byteenable
		.av_read                (fpga_only_master_master_read),                                               //                          .read
		.av_readdata            (fpga_only_master_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (fpga_only_master_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (fpga_only_master_master_write),                                              //                          .write
		.av_writedata           (fpga_only_master_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                       //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                       //               (terminated)
		.av_lock                (1'b0),                                                                       //               (terminated)
		.av_debugaccess         (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ilc_avalon_slave_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ilc_avalon_slave_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (ilc_avalon_slave_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (ilc_avalon_slave_agent_m0_read),                //                         .read
		.uav_write              (ilc_avalon_slave_agent_m0_write),               //                         .write
		.uav_waitrequest        (ilc_avalon_slave_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (ilc_avalon_slave_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (ilc_avalon_slave_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (ilc_avalon_slave_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (ilc_avalon_slave_agent_m0_writedata),           //                         .writedata
		.uav_lock               (ilc_avalon_slave_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (ilc_avalon_slave_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (ILC_avalon_slave_address),                      //      avalon_anti_slave_0.address
		.av_write               (ILC_avalon_slave_write),                        //                         .write
		.av_read                (ILC_avalon_slave_read),                         //                         .read
		.av_readdata            (ILC_avalon_slave_readdata),                     //                         .readdata
		.av_writedata           (ILC_avalon_slave_writedata),                    //                         .writedata
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_control_slave_translator (
		.clk                    (clk_0_clk_clk),                                   //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (sysid_qsys_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                //              (terminated)
		.av_read                (),                                                //              (terminated)
		.av_writedata           (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio64_out_0_s0_translator (
		.clk                    (clk_0_clk_clk),                                                        //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                        //                    reset.reset
		.uav_address            (pio64_out_0_s0_agent_m0_address),                                      // avalon_universal_slave_0.address
		.uav_burstcount         (pio64_out_0_s0_agent_m0_burstcount),                                   //                         .burstcount
		.uav_read               (pio64_out_0_s0_agent_m0_read),                                         //                         .read
		.uav_write              (pio64_out_0_s0_agent_m0_write),                                        //                         .write
		.uav_waitrequest        (pio64_out_0_s0_agent_m0_waitrequest),                                  //                         .waitrequest
		.uav_readdatavalid      (pio64_out_0_s0_agent_m0_readdatavalid),                                //                         .readdatavalid
		.uav_byteenable         (pio64_out_0_s0_agent_m0_byteenable),                                   //                         .byteenable
		.uav_readdata           (pio64_out_0_s0_agent_m0_readdata),                                     //                         .readdata
		.uav_writedata          (pio64_out_0_s0_agent_m0_writedata),                                    //                         .writedata
		.uav_lock               (pio64_out_0_s0_agent_m0_lock),                                         //                         .lock
		.uav_debugaccess        (pio64_out_0_s0_agent_m0_debugaccess),                                  //                         .debugaccess
		.av_write               (pio64_out_0_s0_write),                                                 //      avalon_anti_slave_0.write
		.av_writedata           (pio64_out_0_s0_writedata),                                             //                         .writedata
		.av_address             (),                                                                     //              (terminated)
		.av_read                (),                                                                     //              (terminated)
		.av_readdata            (64'b0000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                                     //              (terminated)
		.av_burstcount          (),                                                                     //              (terminated)
		.av_byteenable          (),                                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                                 //              (terminated)
		.av_writebyteenable     (),                                                                     //              (terminated)
		.av_lock                (),                                                                     //              (terminated)
		.av_chipselect          (),                                                                     //              (terminated)
		.av_clken               (),                                                                     //              (terminated)
		.uav_clken              (1'b0),                                                                 //              (terminated)
		.av_debugaccess         (),                                                                     //              (terminated)
		.av_outputenable        (),                                                                     //              (terminated)
		.uav_response           (),                                                                     //              (terminated)
		.av_response            (2'b00),                                                                //              (terminated)
		.uav_writeresponsevalid (),                                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio64_out_1_s0_translator (
		.clk                    (clk_0_clk_clk),                                                        //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                        //                    reset.reset
		.uav_address            (pio64_out_1_s0_agent_m0_address),                                      // avalon_universal_slave_0.address
		.uav_burstcount         (pio64_out_1_s0_agent_m0_burstcount),                                   //                         .burstcount
		.uav_read               (pio64_out_1_s0_agent_m0_read),                                         //                         .read
		.uav_write              (pio64_out_1_s0_agent_m0_write),                                        //                         .write
		.uav_waitrequest        (pio64_out_1_s0_agent_m0_waitrequest),                                  //                         .waitrequest
		.uav_readdatavalid      (pio64_out_1_s0_agent_m0_readdatavalid),                                //                         .readdatavalid
		.uav_byteenable         (pio64_out_1_s0_agent_m0_byteenable),                                   //                         .byteenable
		.uav_readdata           (pio64_out_1_s0_agent_m0_readdata),                                     //                         .readdata
		.uav_writedata          (pio64_out_1_s0_agent_m0_writedata),                                    //                         .writedata
		.uav_lock               (pio64_out_1_s0_agent_m0_lock),                                         //                         .lock
		.uav_debugaccess        (pio64_out_1_s0_agent_m0_debugaccess),                                  //                         .debugaccess
		.av_write               (pio64_out_1_s0_write),                                                 //      avalon_anti_slave_0.write
		.av_writedata           (pio64_out_1_s0_writedata),                                             //                         .writedata
		.av_address             (),                                                                     //              (terminated)
		.av_read                (),                                                                     //              (terminated)
		.av_readdata            (64'b0000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                                     //              (terminated)
		.av_burstcount          (),                                                                     //              (terminated)
		.av_byteenable          (),                                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                                 //              (terminated)
		.av_writebyteenable     (),                                                                     //              (terminated)
		.av_lock                (),                                                                     //              (terminated)
		.av_chipselect          (),                                                                     //              (terminated)
		.av_clken               (),                                                                     //              (terminated)
		.uav_clken              (1'b0),                                                                 //              (terminated)
		.av_debugaccess         (),                                                                     //              (terminated)
		.av_outputenable        (),                                                                     //              (terminated)
		.uav_response           (),                                                                     //              (terminated)
		.av_response            (2'b00),                                                                //              (terminated)
		.uav_writeresponsevalid (),                                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio64_out_2_s0_translator (
		.clk                    (clk_0_clk_clk),                                                        //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                        //                    reset.reset
		.uav_address            (pio64_out_2_s0_agent_m0_address),                                      // avalon_universal_slave_0.address
		.uav_burstcount         (pio64_out_2_s0_agent_m0_burstcount),                                   //                         .burstcount
		.uav_read               (pio64_out_2_s0_agent_m0_read),                                         //                         .read
		.uav_write              (pio64_out_2_s0_agent_m0_write),                                        //                         .write
		.uav_waitrequest        (pio64_out_2_s0_agent_m0_waitrequest),                                  //                         .waitrequest
		.uav_readdatavalid      (pio64_out_2_s0_agent_m0_readdatavalid),                                //                         .readdatavalid
		.uav_byteenable         (pio64_out_2_s0_agent_m0_byteenable),                                   //                         .byteenable
		.uav_readdata           (pio64_out_2_s0_agent_m0_readdata),                                     //                         .readdata
		.uav_writedata          (pio64_out_2_s0_agent_m0_writedata),                                    //                         .writedata
		.uav_lock               (pio64_out_2_s0_agent_m0_lock),                                         //                         .lock
		.uav_debugaccess        (pio64_out_2_s0_agent_m0_debugaccess),                                  //                         .debugaccess
		.av_write               (pio64_out_2_s0_write),                                                 //      avalon_anti_slave_0.write
		.av_writedata           (pio64_out_2_s0_writedata),                                             //                         .writedata
		.av_address             (),                                                                     //              (terminated)
		.av_read                (),                                                                     //              (terminated)
		.av_readdata            (64'b0000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                                     //              (terminated)
		.av_burstcount          (),                                                                     //              (terminated)
		.av_byteenable          (),                                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                                 //              (terminated)
		.av_writebyteenable     (),                                                                     //              (terminated)
		.av_lock                (),                                                                     //              (terminated)
		.av_chipselect          (),                                                                     //              (terminated)
		.av_clken               (),                                                                     //              (terminated)
		.uav_clken              (1'b0),                                                                 //              (terminated)
		.av_debugaccess         (),                                                                     //              (terminated)
		.av_outputenable        (),                                                                     //              (terminated)
		.uav_response           (),                                                                     //              (terminated)
		.av_response            (2'b00),                                                                //              (terminated)
		.uav_writeresponsevalid (),                                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio64_in_0_s0_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio64_in_0_s0_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (pio64_in_0_s0_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (pio64_in_0_s0_agent_m0_read),                   //                         .read
		.uav_write              (pio64_in_0_s0_agent_m0_write),                  //                         .write
		.uav_waitrequest        (pio64_in_0_s0_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (pio64_in_0_s0_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (pio64_in_0_s0_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (pio64_in_0_s0_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (pio64_in_0_s0_agent_m0_writedata),              //                         .writedata
		.uav_lock               (pio64_in_0_s0_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (pio64_in_0_s0_agent_m0_debugaccess),            //                         .debugaccess
		.av_read                (pio64_in_0_s0_read),                            //      avalon_anti_slave_0.read
		.av_readdata            (pio64_in_0_s0_readdata),                        //                         .readdata
		.av_address             (),                                              //              (terminated)
		.av_write               (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_pio_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (led_pio_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (led_pio_s1_agent_m0_read),                      //                         .read
		.uav_write              (led_pio_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (led_pio_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (led_pio_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (led_pio_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (led_pio_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (led_pio_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (led_pio_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (led_pio_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (led_pio_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (led_pio_s1_write),                              //                         .write
		.av_readdata            (led_pio_s1_readdata),                           //                         .readdata
		.av_writedata           (led_pio_s1_writedata),                          //                         .writedata
		.av_chipselect          (led_pio_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dipsw_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dipsw_pio_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (dipsw_pio_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (dipsw_pio_s1_agent_m0_read),                    //                         .read
		.uav_write              (dipsw_pio_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (dipsw_pio_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (dipsw_pio_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (dipsw_pio_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (dipsw_pio_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (dipsw_pio_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (dipsw_pio_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (dipsw_pio_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (dipsw_pio_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (dipsw_pio_s1_write),                            //                         .write
		.av_readdata            (dipsw_pio_s1_readdata),                         //                         .readdata
		.av_writedata           (dipsw_pio_s1_writedata),                        //                         .writedata
		.av_chipselect          (dipsw_pio_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) button_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (button_pio_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (button_pio_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (button_pio_s1_agent_m0_read),                   //                         .read
		.uav_write              (button_pio_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (button_pio_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (button_pio_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (button_pio_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (button_pio_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (button_pio_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (button_pio_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (button_pio_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (button_pio_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (button_pio_s1_write),                           //                         .write
		.av_readdata            (button_pio_s1_readdata),                        //                         .readdata
		.av_writedata           (button_pio_s1_writedata),                       //                         .writedata
		.av_chipselect          (button_pio_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (144),
		.PKT_ORI_BURST_SIZE_L      (142),
		.PKT_RESPONSE_STATUS_H     (141),
		.PKT_RESPONSE_STATUS_L     (140),
		.PKT_QOS_H                 (123),
		.PKT_QOS_L                 (123),
		.PKT_DATA_SIDEBAND_H       (121),
		.PKT_DATA_SIDEBAND_L       (121),
		.PKT_ADDR_SIDEBAND_H       (120),
		.PKT_ADDR_SIDEBAND_L       (120),
		.PKT_BURST_TYPE_H          (119),
		.PKT_BURST_TYPE_L          (118),
		.PKT_CACHE_H               (139),
		.PKT_CACHE_L               (136),
		.PKT_THREAD_ID_H           (132),
		.PKT_THREAD_ID_L           (132),
		.PKT_BURST_SIZE_H          (117),
		.PKT_BURST_SIZE_L          (115),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (122),
		.PKT_PROTECTION_H          (135),
		.PKT_PROTECTION_L          (133),
		.PKT_BURSTWRAP_H           (114),
		.PKT_BURSTWRAP_L           (114),
		.PKT_BYTE_CNT_H            (113),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (127),
		.PKT_SRC_ID_L              (124),
		.PKT_DEST_ID_H             (131),
		.PKT_DEST_ID_L             (128),
		.ST_DATA_W                 (145),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (4),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_0_m0_agent (
		.clk                   (clk_0_clk_clk),                                                     //       clk.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (mm_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (mm_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (mm_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (mm_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (mm_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (mm_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (mm_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (mm_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (mm_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (mm_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (mm_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                   // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_QOS_H                 (87),
		.PKT_QOS_L                 (87),
		.PKT_DATA_SIDEBAND_H       (85),
		.PKT_DATA_SIDEBAND_L       (85),
		.PKT_ADDR_SIDEBAND_H       (84),
		.PKT_ADDR_SIDEBAND_L       (84),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_CACHE_H               (103),
		.PKT_CACHE_L               (100),
		.PKT_THREAD_ID_H           (96),
		.PKT_THREAD_ID_L           (96),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (92),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) fpga_only_master_master_agent (
		.clk                   (clk_0_clk_clk),                                                              //       clk.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (fpga_only_master_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (fpga_only_master_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (fpga_only_master_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (fpga_only_master_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (fpga_only_master_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (fpga_only_master_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (fpga_only_master_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (fpga_only_master_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (fpga_only_master_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (fpga_only_master_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (fpga_only_master_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (fpga_only_master_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (fpga_only_master_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (fpga_only_master_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (fpga_only_master_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (fpga_only_master_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (fpga_only_master_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (fpga_only_master_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (fpga_only_master_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (fpga_only_master_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (fpga_only_master_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (fpga_only_master_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (jtag_uart_avalon_jtag_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ilc_avalon_slave_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (ilc_avalon_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ilc_avalon_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ilc_avalon_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ilc_avalon_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ilc_avalon_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (ilc_avalon_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ilc_avalon_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ilc_avalon_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (ilc_avalon_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ilc_avalon_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (ilc_avalon_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (ilc_avalon_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ilc_avalon_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (ilc_avalon_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (ilc_avalon_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (ilc_avalon_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ilc_avalon_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ilc_avalon_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ilc_avalon_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ilc_avalon_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ilc_avalon_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ilc_avalon_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ilc_avalon_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ilc_avalon_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ilc_avalon_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ilc_avalon_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ilc_avalon_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ilc_avalon_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ilc_avalon_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ilc_avalon_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ilc_avalon_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ilc_avalon_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (ilc_avalon_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ilc_avalon_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ilc_avalon_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ilc_avalon_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (ilc_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (ilc_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (ilc_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ilc_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ilc_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ilc_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ilc_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ilc_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ilc_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ilc_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_control_slave_agent (
		.clk                     (clk_0_clk_clk),                                                //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (sysid_qsys_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sysid_qsys_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sysid_qsys_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sysid_qsys_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sysid_qsys_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sysid_qsys_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sysid_qsys_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sysid_qsys_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sysid_qsys_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sysid_qsys_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sysid_qsys_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sysid_qsys_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sysid_qsys_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sysid_qsys_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sysid_qsys_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sysid_qsys_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sysid_qsys_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sysid_qsys_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sysid_qsys_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sysid_qsys_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sysid_qsys_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sysid_qsys_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sysid_qsys_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sysid_qsys_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sysid_qsys_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sysid_qsys_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sysid_qsys_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sysid_qsys_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (144),
		.PKT_ORI_BURST_SIZE_L      (142),
		.PKT_RESPONSE_STATUS_H     (141),
		.PKT_RESPONSE_STATUS_L     (140),
		.PKT_BURST_SIZE_H          (117),
		.PKT_BURST_SIZE_L          (115),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (122),
		.PKT_PROTECTION_H          (135),
		.PKT_PROTECTION_L          (133),
		.PKT_BURSTWRAP_H           (114),
		.PKT_BURSTWRAP_L           (114),
		.PKT_BYTE_CNT_H            (113),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (127),
		.PKT_SRC_ID_L              (124),
		.PKT_DEST_ID_H             (131),
		.PKT_DEST_ID_L             (128),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (145),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio64_out_0_s0_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (pio64_out_0_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio64_out_0_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio64_out_0_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio64_out_0_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio64_out_0_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio64_out_0_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio64_out_0_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio64_out_0_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio64_out_0_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio64_out_0_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (pio64_out_0_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio64_out_0_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio64_out_0_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (pio64_out_0_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (pio64_out_0_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio64_out_0_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_003_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                         //                .channel
		.rf_sink_ready           (pio64_out_0_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio64_out_0_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio64_out_0_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio64_out_0_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio64_out_0_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio64_out_0_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio64_out_0_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio64_out_0_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio64_out_0_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio64_out_0_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),               //                .error
		.rdata_fifo_src_ready    (pio64_out_0_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio64_out_0_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio64_out_0_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (146),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio64_out_0_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (pio64_out_0_s0_agent_rf_source_data),             //        in.data
		.in_valid          (pio64_out_0_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (pio64_out_0_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio64_out_0_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio64_out_0_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio64_out_0_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio64_out_0_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio64_out_0_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio64_out_0_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio64_out_0_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (144),
		.PKT_ORI_BURST_SIZE_L      (142),
		.PKT_RESPONSE_STATUS_H     (141),
		.PKT_RESPONSE_STATUS_L     (140),
		.PKT_BURST_SIZE_H          (117),
		.PKT_BURST_SIZE_L          (115),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (122),
		.PKT_PROTECTION_H          (135),
		.PKT_PROTECTION_L          (133),
		.PKT_BURSTWRAP_H           (114),
		.PKT_BURSTWRAP_L           (114),
		.PKT_BYTE_CNT_H            (113),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (127),
		.PKT_SRC_ID_L              (124),
		.PKT_DEST_ID_H             (131),
		.PKT_DEST_ID_L             (128),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (145),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio64_out_1_s0_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (pio64_out_1_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio64_out_1_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio64_out_1_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio64_out_1_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio64_out_1_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio64_out_1_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio64_out_1_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio64_out_1_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio64_out_1_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio64_out_1_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (pio64_out_1_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio64_out_1_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio64_out_1_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (pio64_out_1_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (pio64_out_1_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio64_out_1_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_004_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                         //                .channel
		.rf_sink_ready           (pio64_out_1_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio64_out_1_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio64_out_1_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio64_out_1_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio64_out_1_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio64_out_1_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio64_out_1_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio64_out_1_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio64_out_1_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio64_out_1_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),               //                .error
		.rdata_fifo_src_ready    (pio64_out_1_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio64_out_1_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio64_out_1_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (146),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio64_out_1_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (pio64_out_1_s0_agent_rf_source_data),             //        in.data
		.in_valid          (pio64_out_1_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (pio64_out_1_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio64_out_1_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio64_out_1_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio64_out_1_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio64_out_1_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio64_out_1_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio64_out_1_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio64_out_1_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (144),
		.PKT_ORI_BURST_SIZE_L      (142),
		.PKT_RESPONSE_STATUS_H     (141),
		.PKT_RESPONSE_STATUS_L     (140),
		.PKT_BURST_SIZE_H          (117),
		.PKT_BURST_SIZE_L          (115),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (122),
		.PKT_PROTECTION_H          (135),
		.PKT_PROTECTION_L          (133),
		.PKT_BURSTWRAP_H           (114),
		.PKT_BURSTWRAP_L           (114),
		.PKT_BYTE_CNT_H            (113),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (127),
		.PKT_SRC_ID_L              (124),
		.PKT_DEST_ID_H             (131),
		.PKT_DEST_ID_L             (128),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (145),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio64_out_2_s0_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (pio64_out_2_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio64_out_2_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio64_out_2_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio64_out_2_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio64_out_2_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio64_out_2_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio64_out_2_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio64_out_2_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio64_out_2_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio64_out_2_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (pio64_out_2_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio64_out_2_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio64_out_2_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (pio64_out_2_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (pio64_out_2_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio64_out_2_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_005_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                         //                .channel
		.rf_sink_ready           (pio64_out_2_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio64_out_2_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio64_out_2_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio64_out_2_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio64_out_2_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio64_out_2_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio64_out_2_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio64_out_2_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio64_out_2_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio64_out_2_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),               //                .error
		.rdata_fifo_src_ready    (pio64_out_2_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio64_out_2_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio64_out_2_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (146),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio64_out_2_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (pio64_out_2_s0_agent_rf_source_data),             //        in.data
		.in_valid          (pio64_out_2_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (pio64_out_2_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio64_out_2_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio64_out_2_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio64_out_2_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio64_out_2_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio64_out_2_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio64_out_2_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio64_out_2_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (144),
		.PKT_ORI_BURST_SIZE_L      (142),
		.PKT_RESPONSE_STATUS_H     (141),
		.PKT_RESPONSE_STATUS_L     (140),
		.PKT_BURST_SIZE_H          (117),
		.PKT_BURST_SIZE_L          (115),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (122),
		.PKT_PROTECTION_H          (135),
		.PKT_PROTECTION_L          (133),
		.PKT_BURSTWRAP_H           (114),
		.PKT_BURSTWRAP_L           (114),
		.PKT_BYTE_CNT_H            (113),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (127),
		.PKT_SRC_ID_L              (124),
		.PKT_DEST_ID_H             (131),
		.PKT_DEST_ID_L             (128),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (145),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio64_in_0_s0_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (pio64_in_0_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio64_in_0_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio64_in_0_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio64_in_0_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio64_in_0_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio64_in_0_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio64_in_0_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio64_in_0_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio64_in_0_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio64_in_0_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (pio64_in_0_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio64_in_0_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio64_in_0_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (pio64_in_0_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (pio64_in_0_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio64_in_0_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_006_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                        //                .channel
		.rf_sink_ready           (pio64_in_0_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio64_in_0_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio64_in_0_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio64_in_0_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio64_in_0_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio64_in_0_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio64_in_0_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio64_in_0_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio64_in_0_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio64_in_0_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),              //                .error
		.rdata_fifo_src_ready    (pio64_in_0_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio64_in_0_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio64_in_0_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (146),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio64_in_0_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (pio64_in_0_s0_agent_rf_source_data),             //        in.data
		.in_valid          (pio64_in_0_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (pio64_in_0_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio64_in_0_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio64_in_0_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio64_in_0_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio64_in_0_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio64_in_0_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio64_in_0_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio64_in_0_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (led_pio_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (led_pio_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (led_pio_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (led_pio_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (led_pio_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (led_pio_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (led_pio_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (led_pio_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (led_pio_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (led_pio_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (led_pio_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (led_pio_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (led_pio_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (led_pio_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (led_pio_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (led_pio_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (led_pio_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (led_pio_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (led_pio_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (led_pio_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (led_pio_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (led_pio_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (led_pio_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (led_pio_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (led_pio_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (led_pio_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (led_pio_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (led_pio_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (led_pio_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (led_pio_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (led_pio_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (led_pio_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),              //                .error
		.rdata_fifo_src_ready    (led_pio_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_pio_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (led_pio_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_pio_s1_agent_rf_source_data),               //        in.data
		.in_valid          (led_pio_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (led_pio_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (led_pio_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (led_pio_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (led_pio_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (led_pio_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (led_pio_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (led_pio_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (led_pio_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dipsw_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (dipsw_pio_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dipsw_pio_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dipsw_pio_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dipsw_pio_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dipsw_pio_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (dipsw_pio_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dipsw_pio_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dipsw_pio_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (dipsw_pio_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dipsw_pio_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (dipsw_pio_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (dipsw_pio_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dipsw_pio_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (dipsw_pio_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (dipsw_pio_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (dipsw_pio_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dipsw_pio_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dipsw_pio_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dipsw_pio_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dipsw_pio_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dipsw_pio_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dipsw_pio_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dipsw_pio_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dipsw_pio_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dipsw_pio_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dipsw_pio_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dipsw_pio_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dipsw_pio_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dipsw_pio_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dipsw_pio_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dipsw_pio_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dipsw_pio_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                //                .error
		.rdata_fifo_src_ready    (dipsw_pio_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dipsw_pio_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dipsw_pio_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dipsw_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dipsw_pio_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dipsw_pio_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dipsw_pio_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dipsw_pio_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dipsw_pio_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dipsw_pio_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dipsw_pio_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dipsw_pio_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dipsw_pio_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dipsw_pio_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) button_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (button_pio_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (button_pio_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (button_pio_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (button_pio_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (button_pio_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (button_pio_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (button_pio_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (button_pio_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (button_pio_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (button_pio_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (button_pio_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (button_pio_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (button_pio_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (button_pio_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (button_pio_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (button_pio_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (button_pio_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (button_pio_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (button_pio_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (button_pio_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (button_pio_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (button_pio_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (button_pio_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (button_pio_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (button_pio_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (button_pio_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (button_pio_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (button_pio_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (button_pio_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (button_pio_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (button_pio_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (button_pio_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (button_pio_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (button_pio_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (button_pio_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (button_pio_s1_agent_rf_source_data),             //        in.data
		.in_valid          (button_pio_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (button_pio_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (button_pio_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (button_pio_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (button_pio_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (button_pio_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (button_pio_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (button_pio_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (button_pio_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	soc_system_mm_interconnect_1_router router (
		.sink_ready         (mm_bridge_0_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (mm_bridge_0_m0_agent_cp_valid),                 //          .valid
		.sink_data          (mm_bridge_0_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (mm_bridge_0_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (mm_bridge_0_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                              //       src.ready
		.src_valid          (router_src_valid),                              //          .valid
		.src_data           (router_src_data),                               //          .data
		.src_channel        (router_src_channel),                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (fpga_only_master_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (fpga_only_master_master_agent_cp_valid),         //          .valid
		.sink_data          (fpga_only_master_master_agent_cp_data),          //          .data
		.sink_startofpacket (fpga_only_master_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fpga_only_master_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_001_src_ready),                           //       src.ready
		.src_valid          (router_001_src_valid),                           //          .valid
		.src_data           (router_001_src_data),                            //          .data
		.src_channel        (router_001_src_channel),                         //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_002_src_ready),                               //       src.ready
		.src_valid          (router_002_src_valid),                               //          .valid
		.src_data           (router_002_src_data),                                //          .data
		.src_channel        (router_002_src_channel),                             //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                          //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_003 (
		.sink_ready         (ilc_avalon_slave_agent_rp_ready),               //      sink.ready
		.sink_valid         (ilc_avalon_slave_agent_rp_valid),               //          .valid
		.sink_data          (ilc_avalon_slave_agent_rp_data),                //          .data
		.sink_startofpacket (ilc_avalon_slave_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (ilc_avalon_slave_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                          //       src.ready
		.src_valid          (router_003_src_valid),                          //          .valid
		.src_data           (router_003_src_data),                           //          .data
		.src_channel        (router_003_src_channel),                        //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_004 (
		.sink_ready         (sysid_qsys_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_004_src_ready),                            //       src.ready
		.src_valid          (router_004_src_valid),                            //          .valid
		.src_data           (router_004_src_data),                             //          .data
		.src_channel        (router_004_src_channel),                          //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_005 router_005 (
		.sink_ready         (pio64_out_0_s0_agent_rp_ready),                 //      sink.ready
		.sink_valid         (pio64_out_0_s0_agent_rp_valid),                 //          .valid
		.sink_data          (pio64_out_0_s0_agent_rp_data),                  //          .data
		.sink_startofpacket (pio64_out_0_s0_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (pio64_out_0_s0_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                          //       src.ready
		.src_valid          (router_005_src_valid),                          //          .valid
		.src_data           (router_005_src_data),                           //          .data
		.src_channel        (router_005_src_channel),                        //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_005 router_006 (
		.sink_ready         (pio64_out_1_s0_agent_rp_ready),                 //      sink.ready
		.sink_valid         (pio64_out_1_s0_agent_rp_valid),                 //          .valid
		.sink_data          (pio64_out_1_s0_agent_rp_data),                  //          .data
		.sink_startofpacket (pio64_out_1_s0_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (pio64_out_1_s0_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                          //       src.ready
		.src_valid          (router_006_src_valid),                          //          .valid
		.src_data           (router_006_src_data),                           //          .data
		.src_channel        (router_006_src_channel),                        //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_005 router_007 (
		.sink_ready         (pio64_out_2_s0_agent_rp_ready),                 //      sink.ready
		.sink_valid         (pio64_out_2_s0_agent_rp_valid),                 //          .valid
		.sink_data          (pio64_out_2_s0_agent_rp_data),                  //          .data
		.sink_startofpacket (pio64_out_2_s0_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (pio64_out_2_s0_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                          //       src.ready
		.src_valid          (router_007_src_valid),                          //          .valid
		.src_data           (router_007_src_data),                           //          .data
		.src_channel        (router_007_src_channel),                        //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_005 router_008 (
		.sink_ready         (pio64_in_0_s0_agent_rp_ready),                  //      sink.ready
		.sink_valid         (pio64_in_0_s0_agent_rp_valid),                  //          .valid
		.sink_data          (pio64_in_0_s0_agent_rp_data),                   //          .data
		.sink_startofpacket (pio64_in_0_s0_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (pio64_in_0_s0_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                          //       src.ready
		.src_valid          (router_008_src_valid),                          //          .valid
		.src_data           (router_008_src_data),                           //          .data
		.src_channel        (router_008_src_channel),                        //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_009 (
		.sink_ready         (led_pio_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (led_pio_s1_agent_rp_valid),                     //          .valid
		.sink_data          (led_pio_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (led_pio_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (led_pio_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                          //       src.ready
		.src_valid          (router_009_src_valid),                          //          .valid
		.src_data           (router_009_src_data),                           //          .data
		.src_channel        (router_009_src_channel),                        //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_010 (
		.sink_ready         (dipsw_pio_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (dipsw_pio_s1_agent_rp_valid),                   //          .valid
		.sink_data          (dipsw_pio_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (dipsw_pio_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (dipsw_pio_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                          //       src.ready
		.src_valid          (router_010_src_valid),                          //          .valid
		.src_data           (router_010_src_data),                           //          .data
		.src_channel        (router_010_src_channel),                        //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_011 (
		.sink_ready         (button_pio_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (button_pio_s1_agent_rp_valid),                  //          .valid
		.sink_data          (button_pio_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (button_pio_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (button_pio_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                          //       src.ready
		.src_valid          (router_011_src_valid),                          //          .valid
		.src_data           (router_011_src_data),                           //          .data
		.src_channel        (router_011_src_channel),                        //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                     //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (131),
		.PKT_DEST_ID_L             (128),
		.PKT_SRC_ID_H              (127),
		.PKT_SRC_ID_L              (124),
		.PKT_BYTE_CNT_H            (113),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (145),
		.ST_CHANNEL_W              (10),
		.VALID_WIDTH               (10),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mm_bridge_0_m0_limiter (
		.clk                    (clk_0_clk_clk),                                 //       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                              //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                              //          .valid
		.cmd_sink_data          (router_src_data),                               //          .data
		.cmd_sink_channel       (router_src_channel),                            //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                      //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                        //          .endofpacket
		.cmd_src_ready          (mm_bridge_0_m0_limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (mm_bridge_0_m0_limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (mm_bridge_0_m0_limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (mm_bridge_0_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (mm_bridge_0_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                             //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                             //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                           //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                              //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                     //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                       //          .endofpacket
		.rsp_src_ready          (mm_bridge_0_m0_limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (mm_bridge_0_m0_limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (mm_bridge_0_m0_limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (mm_bridge_0_m0_limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (mm_bridge_0_m0_limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (mm_bridge_0_m0_limiter_rsp_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (mm_bridge_0_m0_limiter_cmd_valid_data)          // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (92),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (88),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (10),
		.VALID_WIDTH               (10),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) fpga_only_master_master_limiter (
		.clk                    (clk_0_clk_clk),                                         //       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                  //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                  //          .valid
		.cmd_sink_data          (router_001_src_data),                                   //          .data
		.cmd_sink_channel       (router_001_src_channel),                                //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                          //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                            //          .endofpacket
		.cmd_src_ready          (fpga_only_master_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (fpga_only_master_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (fpga_only_master_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (fpga_only_master_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (fpga_only_master_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                 //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                 //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                               //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                  //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                         //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                           //          .endofpacket
		.rsp_src_ready          (fpga_only_master_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (fpga_only_master_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (fpga_only_master_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (fpga_only_master_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (fpga_only_master_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (fpga_only_master_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (fpga_only_master_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) jtag_uart_avalon_jtag_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                   //       cr0.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                               //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                //          .data
		.sink0_channel         (cmd_mux_src_channel),                                             //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                               //          .ready
		.source0_valid         (jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) ilc_avalon_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                        //       cr0.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                //          .ready
		.source0_valid         (ilc_avalon_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ilc_avalon_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (ilc_avalon_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ilc_avalon_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ilc_avalon_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ilc_avalon_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) sysid_qsys_control_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                //       cr0.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                        //          .ready
		.source0_valid         (sysid_qsys_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sysid_qsys_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sysid_qsys_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sysid_qsys_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sysid_qsys_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sysid_qsys_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) led_pio_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                  //       cr0.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                           //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                          //          .ready
		.source0_valid         (led_pio_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (led_pio_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (led_pio_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (led_pio_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (led_pio_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (led_pio_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) dipsw_pio_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                    //       cr0.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                             //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                            //          .ready
		.source0_valid         (dipsw_pio_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dipsw_pio_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (dipsw_pio_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dipsw_pio_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dipsw_pio_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dipsw_pio_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) button_pio_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                     //       cr0.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                             //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                              //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                           //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                       //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                             //          .ready
		.source0_valid         (button_pio_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (button_pio_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (button_pio_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (button_pio_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (button_pio_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (button_pio_s1_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                 //        clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (mm_bridge_0_m0_limiter_cmd_src_ready),          //       sink.ready
		.sink_channel       (mm_bridge_0_m0_limiter_cmd_src_channel),        //           .channel
		.sink_data          (mm_bridge_0_m0_limiter_cmd_src_data),           //           .data
		.sink_startofpacket (mm_bridge_0_m0_limiter_cmd_src_startofpacket),  //           .startofpacket
		.sink_endofpacket   (mm_bridge_0_m0_limiter_cmd_src_endofpacket),    //           .endofpacket
		.sink_valid         (mm_bridge_0_m0_limiter_cmd_valid_data),         // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                          //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                          //           .valid
		.src0_data          (cmd_demux_src0_data),                           //           .data
		.src0_channel       (cmd_demux_src0_channel),                        //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                  //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                    //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                          //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                          //           .valid
		.src1_data          (cmd_demux_src1_data),                           //           .data
		.src1_channel       (cmd_demux_src1_channel),                        //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                  //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                    //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                          //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                          //           .valid
		.src2_data          (cmd_demux_src2_data),                           //           .data
		.src2_channel       (cmd_demux_src2_channel),                        //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                  //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                    //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                          //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                          //           .valid
		.src3_data          (cmd_demux_src3_data),                           //           .data
		.src3_channel       (cmd_demux_src3_channel),                        //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                  //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                    //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                          //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                          //           .valid
		.src4_data          (cmd_demux_src4_data),                           //           .data
		.src4_channel       (cmd_demux_src4_channel),                        //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                  //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                    //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                          //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                          //           .valid
		.src5_data          (cmd_demux_src5_data),                           //           .data
		.src5_channel       (cmd_demux_src5_channel),                        //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                  //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                    //           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                          //       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                          //           .valid
		.src6_data          (cmd_demux_src6_data),                           //           .data
		.src6_channel       (cmd_demux_src6_channel),                        //           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                  //           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                    //           .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                          //       src7.ready
		.src7_valid         (cmd_demux_src7_valid),                          //           .valid
		.src7_data          (cmd_demux_src7_data),                           //           .data
		.src7_channel       (cmd_demux_src7_channel),                        //           .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                  //           .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket),                    //           .endofpacket
		.src8_ready         (cmd_demux_src8_ready),                          //       src8.ready
		.src8_valid         (cmd_demux_src8_valid),                          //           .valid
		.src8_data          (cmd_demux_src8_data),                           //           .data
		.src8_channel       (cmd_demux_src8_channel),                        //           .channel
		.src8_startofpacket (cmd_demux_src8_startofpacket),                  //           .startofpacket
		.src8_endofpacket   (cmd_demux_src8_endofpacket),                    //           .endofpacket
		.src9_ready         (cmd_demux_src9_ready),                          //       src9.ready
		.src9_valid         (cmd_demux_src9_valid),                          //           .valid
		.src9_data          (cmd_demux_src9_data),                           //           .data
		.src9_channel       (cmd_demux_src9_channel),                        //           .channel
		.src9_startofpacket (cmd_demux_src9_startofpacket),                  //           .startofpacket
		.src9_endofpacket   (cmd_demux_src9_endofpacket)                     //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                         //        clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready         (fpga_only_master_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (fpga_only_master_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (fpga_only_master_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (fpga_only_master_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (fpga_only_master_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (fpga_only_master_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                              //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                              //           .valid
		.src0_data          (cmd_demux_001_src0_data),                               //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                            //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                      //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                        //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                              //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                              //           .valid
		.src1_data          (cmd_demux_001_src1_data),                               //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                            //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                      //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                        //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                              //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                              //           .valid
		.src2_data          (cmd_demux_001_src2_data),                               //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                            //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                      //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                        //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                              //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                              //           .valid
		.src3_data          (cmd_demux_001_src3_data),                               //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                            //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                      //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                        //           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                              //       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                              //           .valid
		.src4_data          (cmd_demux_001_src4_data),                               //           .data
		.src4_channel       (cmd_demux_001_src4_channel),                            //           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                      //           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),                        //           .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                              //       src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                              //           .valid
		.src5_data          (cmd_demux_001_src5_data),                               //           .data
		.src5_channel       (cmd_demux_001_src5_channel),                            //           .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),                      //           .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket)                         //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                                                     //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                                 //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                                 //          .valid
		.src_data            (cmd_mux_src_data),                                                                  //          .data
		.src_channel         (cmd_mux_src_channel),                                                               //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                           //          .endofpacket
		.sink0_ready         (mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                                          //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                                        //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                                           //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                                                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                                                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                                          //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                  //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                  //          .valid
		.src_data            (cmd_mux_001_src_data),                                                   //          .data
		.src_channel         (cmd_mux_001_src_channel),                                                //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                            //          .endofpacket
		.sink0_ready         (mm_bridge_0_m0_to_ilc_avalon_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (mm_bridge_0_m0_to_ilc_avalon_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (mm_bridge_0_m0_to_ilc_avalon_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (mm_bridge_0_m0_to_ilc_avalon_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (mm_bridge_0_m0_to_ilc_avalon_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (mm_bridge_0_m0_to_ilc_avalon_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                                               //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                                               //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                                             //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                                                //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                                       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                                          //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                                                  //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                                          //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                                          //          .valid
		.src_data            (cmd_mux_002_src_data),                                                           //          .data
		.src_channel         (cmd_mux_002_src_channel),                                                        //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                                  //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                                    //          .endofpacket
		.sink0_ready         (mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                                                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                                                       //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                                                     //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                                                        //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                                               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                                                  //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_003 cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                         //          .valid
		.src_data            (cmd_mux_003_src_data),                          //          .data
		.src_channel         (cmd_mux_003_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                        //          .channel
		.sink0_data          (cmd_demux_src3_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_003 cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                         //          .valid
		.src_data            (cmd_mux_004_src_data),                          //          .data
		.src_channel         (cmd_mux_004_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                        //          .channel
		.sink0_data          (cmd_demux_src4_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_003 cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                         //          .valid
		.src_data            (cmd_mux_005_src_data),                          //          .data
		.src_channel         (cmd_mux_005_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                        //          .channel
		.sink0_data          (cmd_demux_src5_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_003 cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                         //          .valid
		.src_data            (cmd_mux_006_src_data),                          //          .data
		.src_channel         (cmd_mux_006_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                        //          .channel
		.sink0_data          (cmd_demux_src6_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                                    //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                            //          .valid
		.src_data            (cmd_mux_007_src_data),                                             //          .data
		.src_channel         (cmd_mux_007_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                                         //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                                       //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                                          //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                                      //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                              //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                              //          .valid
		.src_data            (cmd_mux_008_src_data),                                               //          .data
		.src_channel         (cmd_mux_008_src_channel),                                            //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                                        //          .endofpacket
		.sink0_ready         (mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                                           //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                                         //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                                            //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),                                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)                                      //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                                       //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                               //          .valid
		.src_data            (cmd_mux_009_src_data),                                                //          .data
		.src_channel         (cmd_mux_009_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                                            //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                                            //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                                          //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                                             //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket)                                       //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                          //      sink.ready
		.sink_channel       (router_002_src_channel),                        //          .channel
		.sink_data          (router_002_src_data),                           //          .data
		.sink_startofpacket (router_002_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_002_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_src0_data),                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_src1_data),                           //          .data
		.src1_channel       (rsp_demux_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                          //      sink.ready
		.sink_channel       (router_003_src_channel),                        //          .channel
		.sink_data          (router_003_src_data),                           //          .data
		.sink_startofpacket (router_003_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_003_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_001_src0_data),                       //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_001_src1_data),                       //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                          //      sink.ready
		.sink_channel       (router_004_src_channel),                        //          .channel
		.sink_data          (router_004_src_data),                           //          .data
		.sink_startofpacket (router_004_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_004_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_002_src0_data),                       //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_002_src1_data),                       //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_003 rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                          //      sink.ready
		.sink_channel       (router_005_src_channel),                        //          .channel
		.sink_data          (router_005_src_data),                           //          .data
		.sink_startofpacket (router_005_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_005_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_003_src0_data),                       //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_003 rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                          //      sink.ready
		.sink_channel       (router_006_src_channel),                        //          .channel
		.sink_data          (router_006_src_data),                           //          .data
		.sink_startofpacket (router_006_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_006_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_004_src0_data),                       //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_003 rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                          //      sink.ready
		.sink_channel       (router_007_src_channel),                        //          .channel
		.sink_data          (router_007_src_data),                           //          .data
		.sink_startofpacket (router_007_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_007_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_005_src0_data),                       //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_003 rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                          //      sink.ready
		.sink_channel       (router_008_src_channel),                        //          .channel
		.sink_data          (router_008_src_data),                           //          .data
		.sink_startofpacket (router_008_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_008_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_006_src0_data),                       //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                          //      sink.ready
		.sink_channel       (router_009_src_channel),                        //          .channel
		.sink_data          (router_009_src_data),                           //          .data
		.sink_startofpacket (router_009_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_009_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_007_src0_data),                       //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_007_src1_data),                       //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                          //      sink.ready
		.sink_channel       (router_010_src_channel),                        //          .channel
		.sink_data          (router_010_src_data),                           //          .data
		.sink_startofpacket (router_010_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_010_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_008_src0_data),                       //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_008_src1_data),                       //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                          //      sink.ready
		.sink_channel       (router_011_src_channel),                        //          .channel
		.sink_data          (router_011_src_data),                           //          .data
		.sink_startofpacket (router_011_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_011_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_009_src0_data),                       //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_009_src1_data),                       //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                                                     //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                                 //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                                 //          .valid
		.src_data            (rsp_mux_src_data),                                                                  //          .data
		.src_channel         (rsp_mux_src_channel),                                                               //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                         //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                           //          .endofpacket
		.sink0_ready         (jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (ilc_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),                    //     sink1.ready
		.sink1_valid         (ilc_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),                    //          .valid
		.sink1_channel       (ilc_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),                  //          .channel
		.sink1_data          (ilc_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_data),                     //          .data
		.sink1_startofpacket (ilc_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (ilc_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),              //          .endofpacket
		.sink2_ready         (sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),            //     sink2.ready
		.sink2_valid         (sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),            //          .valid
		.sink2_channel       (sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),          //          .channel
		.sink2_data          (sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_data),             //          .data
		.sink2_startofpacket (sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket),    //          .startofpacket
		.sink2_endofpacket   (sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),      //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                                          //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                                          //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                                        //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                                           //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                                  //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                                                    //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                                          //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                                          //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                                        //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                                           //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                                                  //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                                                    //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                                                          //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                                                          //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                                                        //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                                                           //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                                                  //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),                                                    //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                                                          //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                                                          //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                                                        //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                                                           //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),                                                  //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),                                                    //          .endofpacket
		.sink7_ready         (led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),                          //     sink7.ready
		.sink7_valid         (led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),                          //          .valid
		.sink7_channel       (led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),                        //          .channel
		.sink7_data          (led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_data),                           //          .data
		.sink7_startofpacket (led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket),                  //          .startofpacket
		.sink7_endofpacket   (led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),                    //          .endofpacket
		.sink8_ready         (dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),                        //     sink8.ready
		.sink8_valid         (dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),                        //          .valid
		.sink8_channel       (dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),                      //          .channel
		.sink8_data          (dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_data),                         //          .data
		.sink8_startofpacket (dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.sink8_endofpacket   (dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.sink9_ready         (button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),                       //     sink9.ready
		.sink9_valid         (button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),                       //          .valid
		.sink9_channel       (button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),                     //          .channel
		.sink9_data          (button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_data),                        //          .data
		.sink9_startofpacket (button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket),               //          .startofpacket
		.sink9_endofpacket   (button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                         //          .valid
		.src_data            (rsp_mux_001_src_data),                          //          .data
		.src_channel         (rsp_mux_001_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                          //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                          //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                        //          .channel
		.sink0_data          (rsp_demux_src1_data),                           //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                    //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                      //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                      //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                    //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                       //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),                //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                      //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                      //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                    //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                       //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),                //          .endofpacket
		.sink3_ready         (rsp_demux_007_src1_ready),                      //     sink3.ready
		.sink3_valid         (rsp_demux_007_src1_valid),                      //          .valid
		.sink3_channel       (rsp_demux_007_src1_channel),                    //          .channel
		.sink3_data          (rsp_demux_007_src1_data),                       //          .data
		.sink3_startofpacket (rsp_demux_007_src1_startofpacket),              //          .startofpacket
		.sink3_endofpacket   (rsp_demux_007_src1_endofpacket),                //          .endofpacket
		.sink4_ready         (rsp_demux_008_src1_ready),                      //     sink4.ready
		.sink4_valid         (rsp_demux_008_src1_valid),                      //          .valid
		.sink4_channel       (rsp_demux_008_src1_channel),                    //          .channel
		.sink4_data          (rsp_demux_008_src1_data),                       //          .data
		.sink4_startofpacket (rsp_demux_008_src1_startofpacket),              //          .startofpacket
		.sink4_endofpacket   (rsp_demux_008_src1_endofpacket),                //          .endofpacket
		.sink5_ready         (rsp_demux_009_src1_ready),                      //     sink5.ready
		.sink5_valid         (rsp_demux_009_src1_valid),                      //          .valid
		.sink5_channel       (rsp_demux_009_src1_channel),                    //          .channel
		.sink5_data          (rsp_demux_009_src1_data),                       //          .data
		.sink5_startofpacket (rsp_demux_009_src1_startofpacket),              //          .startofpacket
		.sink5_endofpacket   (rsp_demux_009_src1_endofpacket)                 //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (113),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (114),
		.IN_PKT_BURSTWRAP_L            (114),
		.IN_PKT_BURST_SIZE_H           (117),
		.IN_PKT_BURST_SIZE_L           (115),
		.IN_PKT_RESPONSE_STATUS_H      (141),
		.IN_PKT_RESPONSE_STATUS_L      (140),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (119),
		.IN_PKT_BURST_TYPE_L           (118),
		.IN_PKT_ORI_BURST_SIZE_L       (142),
		.IN_PKT_ORI_BURST_SIZE_H       (144),
		.IN_ST_DATA_W                  (145),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (77),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                     //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.in_valid             (cmd_demux_src0_valid),                                                              //      sink.valid
		.in_channel           (cmd_demux_src0_channel),                                                            //          .channel
		.in_startofpacket     (cmd_demux_src0_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (cmd_demux_src0_endofpacket),                                                        //          .endofpacket
		.in_ready             (cmd_demux_src0_ready),                                                              //          .ready
		.in_data              (cmd_demux_src0_data),                                                               //          .data
		.out_endofpacket      (mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mm_bridge_0_m0_to_jtag_uart_avalon_jtag_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (113),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (114),
		.IN_PKT_BURSTWRAP_L            (114),
		.IN_PKT_BURST_SIZE_H           (117),
		.IN_PKT_BURST_SIZE_L           (115),
		.IN_PKT_RESPONSE_STATUS_H      (141),
		.IN_PKT_RESPONSE_STATUS_L      (140),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (119),
		.IN_PKT_BURST_TYPE_L           (118),
		.IN_PKT_ORI_BURST_SIZE_L       (142),
		.IN_PKT_ORI_BURST_SIZE_H       (144),
		.IN_ST_DATA_W                  (145),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (77),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mm_bridge_0_m0_to_ilc_avalon_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                          //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_valid             (cmd_demux_src1_valid),                                                   //      sink.valid
		.in_channel           (cmd_demux_src1_channel),                                                 //          .channel
		.in_startofpacket     (cmd_demux_src1_startofpacket),                                           //          .startofpacket
		.in_endofpacket       (cmd_demux_src1_endofpacket),                                             //          .endofpacket
		.in_ready             (cmd_demux_src1_ready),                                                   //          .ready
		.in_data              (cmd_demux_src1_data),                                                    //          .data
		.out_endofpacket      (mm_bridge_0_m0_to_ilc_avalon_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mm_bridge_0_m0_to_ilc_avalon_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (mm_bridge_0_m0_to_ilc_avalon_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (mm_bridge_0_m0_to_ilc_avalon_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (mm_bridge_0_m0_to_ilc_avalon_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mm_bridge_0_m0_to_ilc_avalon_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (113),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (114),
		.IN_PKT_BURSTWRAP_L            (114),
		.IN_PKT_BURST_SIZE_H           (117),
		.IN_PKT_BURST_SIZE_L           (115),
		.IN_PKT_RESPONSE_STATUS_H      (141),
		.IN_PKT_RESPONSE_STATUS_L      (140),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (119),
		.IN_PKT_BURST_TYPE_L           (118),
		.IN_PKT_ORI_BURST_SIZE_L       (142),
		.IN_PKT_ORI_BURST_SIZE_H       (144),
		.IN_ST_DATA_W                  (145),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (77),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                  //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_valid             (cmd_demux_src2_valid),                                                           //      sink.valid
		.in_channel           (cmd_demux_src2_channel),                                                         //          .channel
		.in_startofpacket     (cmd_demux_src2_startofpacket),                                                   //          .startofpacket
		.in_endofpacket       (cmd_demux_src2_endofpacket),                                                     //          .endofpacket
		.in_ready             (cmd_demux_src2_ready),                                                           //          .ready
		.in_data              (cmd_demux_src2_data),                                                            //          .data
		.out_endofpacket      (mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mm_bridge_0_m0_to_sysid_qsys_control_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (113),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (114),
		.IN_PKT_BURSTWRAP_L            (114),
		.IN_PKT_BURST_SIZE_H           (117),
		.IN_PKT_BURST_SIZE_L           (115),
		.IN_PKT_RESPONSE_STATUS_H      (141),
		.IN_PKT_RESPONSE_STATUS_L      (140),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (119),
		.IN_PKT_BURST_TYPE_L           (118),
		.IN_PKT_ORI_BURST_SIZE_L       (142),
		.IN_PKT_ORI_BURST_SIZE_H       (144),
		.IN_ST_DATA_W                  (145),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (77),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_valid             (cmd_demux_src7_valid),                                             //      sink.valid
		.in_channel           (cmd_demux_src7_channel),                                           //          .channel
		.in_startofpacket     (cmd_demux_src7_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (cmd_demux_src7_endofpacket),                                       //          .endofpacket
		.in_ready             (cmd_demux_src7_ready),                                             //          .ready
		.in_data              (cmd_demux_src7_data),                                              //          .data
		.out_endofpacket      (mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mm_bridge_0_m0_to_led_pio_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (113),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (114),
		.IN_PKT_BURSTWRAP_L            (114),
		.IN_PKT_BURST_SIZE_H           (117),
		.IN_PKT_BURST_SIZE_L           (115),
		.IN_PKT_RESPONSE_STATUS_H      (141),
		.IN_PKT_RESPONSE_STATUS_L      (140),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (119),
		.IN_PKT_BURST_TYPE_L           (118),
		.IN_PKT_ORI_BURST_SIZE_L       (142),
		.IN_PKT_ORI_BURST_SIZE_H       (144),
		.IN_ST_DATA_W                  (145),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (77),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                      //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (cmd_demux_src8_valid),                                               //      sink.valid
		.in_channel           (cmd_demux_src8_channel),                                             //          .channel
		.in_startofpacket     (cmd_demux_src8_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (cmd_demux_src8_endofpacket),                                         //          .endofpacket
		.in_ready             (cmd_demux_src8_ready),                                               //          .ready
		.in_data              (cmd_demux_src8_data),                                                //          .data
		.out_endofpacket      (mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mm_bridge_0_m0_to_dipsw_pio_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (113),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (114),
		.IN_PKT_BURSTWRAP_L            (114),
		.IN_PKT_BURST_SIZE_H           (117),
		.IN_PKT_BURST_SIZE_L           (115),
		.IN_PKT_RESPONSE_STATUS_H      (141),
		.IN_PKT_RESPONSE_STATUS_L      (140),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (119),
		.IN_PKT_BURST_TYPE_L           (118),
		.IN_PKT_ORI_BURST_SIZE_L       (142),
		.IN_PKT_ORI_BURST_SIZE_H       (144),
		.IN_ST_DATA_W                  (145),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (77),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                       //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (cmd_demux_src9_valid),                                                //      sink.valid
		.in_channel           (cmd_demux_src9_channel),                                              //          .channel
		.in_startofpacket     (cmd_demux_src9_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (cmd_demux_src9_endofpacket),                                          //          .endofpacket
		.in_ready             (cmd_demux_src9_ready),                                                //          .ready
		.in_data              (cmd_demux_src9_data),                                                 //          .data
		.out_endofpacket      (mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mm_bridge_0_m0_to_button_pio_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (77),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (78),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (113),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (117),
		.OUT_PKT_BURST_SIZE_L          (115),
		.OUT_PKT_RESPONSE_STATUS_H     (141),
		.OUT_PKT_RESPONSE_STATUS_L     (140),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (119),
		.OUT_PKT_BURST_TYPE_L          (118),
		.OUT_PKT_ORI_BURST_SIZE_L      (142),
		.OUT_PKT_ORI_BURST_SIZE_H      (144),
		.OUT_ST_DATA_W                 (145),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                     //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.in_valid             (rsp_demux_src0_valid),                                                              //      sink.valid
		.in_channel           (rsp_demux_src0_channel),                                                            //          .channel
		.in_startofpacket     (rsp_demux_src0_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_src0_endofpacket),                                                        //          .endofpacket
		.in_ready             (rsp_demux_src0_ready),                                                              //          .ready
		.in_data              (rsp_demux_src0_data),                                                               //          .data
		.out_endofpacket      (jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (jtag_uart_avalon_jtag_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (77),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (78),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (113),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (117),
		.OUT_PKT_BURST_SIZE_L          (115),
		.OUT_PKT_RESPONSE_STATUS_H     (141),
		.OUT_PKT_RESPONSE_STATUS_L     (140),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (119),
		.OUT_PKT_BURST_TYPE_L          (118),
		.OUT_PKT_ORI_BURST_SIZE_L      (142),
		.OUT_PKT_ORI_BURST_SIZE_H      (144),
		.OUT_ST_DATA_W                 (145),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ilc_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                          //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_valid             (rsp_demux_001_src0_valid),                                               //      sink.valid
		.in_channel           (rsp_demux_001_src0_channel),                                             //          .channel
		.in_startofpacket     (rsp_demux_001_src0_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src0_endofpacket),                                         //          .endofpacket
		.in_ready             (rsp_demux_001_src0_ready),                                               //          .ready
		.in_data              (rsp_demux_001_src0_data),                                                //          .data
		.out_endofpacket      (ilc_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ilc_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ilc_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ilc_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ilc_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ilc_avalon_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (77),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (78),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (113),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (117),
		.OUT_PKT_BURST_SIZE_L          (115),
		.OUT_PKT_RESPONSE_STATUS_H     (141),
		.OUT_PKT_RESPONSE_STATUS_L     (140),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (119),
		.OUT_PKT_BURST_TYPE_L          (118),
		.OUT_PKT_ORI_BURST_SIZE_L      (142),
		.OUT_PKT_ORI_BURST_SIZE_H      (144),
		.OUT_ST_DATA_W                 (145),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                  //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_valid             (rsp_demux_002_src0_valid),                                                       //      sink.valid
		.in_channel           (rsp_demux_002_src0_channel),                                                     //          .channel
		.in_startofpacket     (rsp_demux_002_src0_startofpacket),                                               //          .startofpacket
		.in_endofpacket       (rsp_demux_002_src0_endofpacket),                                                 //          .endofpacket
		.in_ready             (rsp_demux_002_src0_ready),                                                       //          .ready
		.in_data              (rsp_demux_002_src0_data),                                                        //          .data
		.out_endofpacket      (sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sysid_qsys_control_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (77),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (78),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (113),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (117),
		.OUT_PKT_BURST_SIZE_L          (115),
		.OUT_PKT_RESPONSE_STATUS_H     (141),
		.OUT_PKT_RESPONSE_STATUS_L     (140),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (119),
		.OUT_PKT_BURST_TYPE_L          (118),
		.OUT_PKT_ORI_BURST_SIZE_L      (142),
		.OUT_PKT_ORI_BURST_SIZE_H      (144),
		.OUT_ST_DATA_W                 (145),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_valid             (rsp_demux_007_src0_valid),                                         //      sink.valid
		.in_channel           (rsp_demux_007_src0_channel),                                       //          .channel
		.in_startofpacket     (rsp_demux_007_src0_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (rsp_demux_007_src0_endofpacket),                                   //          .endofpacket
		.in_ready             (rsp_demux_007_src0_ready),                                         //          .ready
		.in_data              (rsp_demux_007_src0_data),                                          //          .data
		.out_endofpacket      (led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (led_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (77),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (78),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (113),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (117),
		.OUT_PKT_BURST_SIZE_L          (115),
		.OUT_PKT_RESPONSE_STATUS_H     (141),
		.OUT_PKT_RESPONSE_STATUS_L     (140),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (119),
		.OUT_PKT_BURST_TYPE_L          (118),
		.OUT_PKT_ORI_BURST_SIZE_L      (142),
		.OUT_PKT_ORI_BURST_SIZE_H      (144),
		.OUT_ST_DATA_W                 (145),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                      //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (rsp_demux_008_src0_valid),                                           //      sink.valid
		.in_channel           (rsp_demux_008_src0_channel),                                         //          .channel
		.in_startofpacket     (rsp_demux_008_src0_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (rsp_demux_008_src0_endofpacket),                                     //          .endofpacket
		.in_ready             (rsp_demux_008_src0_ready),                                           //          .ready
		.in_data              (rsp_demux_008_src0_data),                                            //          .data
		.out_endofpacket      (dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dipsw_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (77),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (78),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (113),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (117),
		.OUT_PKT_BURST_SIZE_L          (115),
		.OUT_PKT_RESPONSE_STATUS_H     (141),
		.OUT_PKT_RESPONSE_STATUS_L     (140),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (119),
		.OUT_PKT_BURST_TYPE_L          (118),
		.OUT_PKT_ORI_BURST_SIZE_L      (142),
		.OUT_PKT_ORI_BURST_SIZE_H      (144),
		.OUT_ST_DATA_W                 (145),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                       //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (rsp_demux_009_src0_valid),                                            //      sink.valid
		.in_channel           (rsp_demux_009_src0_channel),                                          //          .channel
		.in_startofpacket     (rsp_demux_009_src0_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (rsp_demux_009_src0_endofpacket),                                      //          .endofpacket
		.in_ready             (rsp_demux_009_src0_ready),                                            //          .ready
		.in_data              (rsp_demux_009_src0_data),                                             //          .data
		.out_endofpacket      (button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (button_pio_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                           //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ilc_avalon_slave_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (ilc_avalon_slave_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (ilc_avalon_slave_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (sysid_qsys_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysid_qsys_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio64_out_0_s0_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (pio64_out_0_s0_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (pio64_out_0_s0_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio64_out_1_s0_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (pio64_out_1_s0_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (pio64_out_1_s0_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio64_out_2_s0_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (pio64_out_2_s0_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (pio64_out_2_s0_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio64_in_0_s0_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (pio64_in_0_s0_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (pio64_in_0_s0_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_pio_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (led_pio_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (led_pio_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dipsw_pio_s1_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (dipsw_pio_s1_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (dipsw_pio_s1_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (button_pio_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (button_pio_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (button_pio_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)              //         .error
	);

endmodule
